
test250421.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006314  08006314  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08006314  08006314  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006314  08006314  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800631c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e0  20000104  08006420  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08006420  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b5f  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003311  00000000  00000000  00039c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0003cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  0003df20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c123  00000000  00000000  0003ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013270  00000000  00000000  0005ae43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1893  00000000  00000000  0006e0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  0010f99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000104 	.word	0x20000104
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006264 	.word	0x08006264

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000108 	.word	0x20000108
 80001c8:	08006264 	.word	0x08006264

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b08a      	sub	sp, #40	; 0x28
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t idPart1 = (STM32_UUID[0]&0x0008F000)>>12;
 80001d2:	4b81      	ldr	r3, [pc, #516]	; (80003d8 <main+0x20c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	0b1b      	lsrs	r3, r3, #12
 80001d8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 80001dc:	613b      	str	r3, [r7, #16]
  uint32_t idPart2 = (STM32_UUID[1]&0x00FFF000)>>12;
 80001de:	4b7f      	ldr	r3, [pc, #508]	; (80003dc <main+0x210>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	0b1b      	lsrs	r3, r3, #12
 80001e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80001e8:	60fb      	str	r3, [r7, #12]
  uint32_t idPart3 = (STM32_UUID[2]&0x00000F00)>>8;
 80001ea:	4b7d      	ldr	r3, [pc, #500]	; (80003e0 <main+0x214>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	f003 030f 	and.w	r3, r3, #15
 80001f4:	60bb      	str	r3, [r7, #8]

	uint8_t data[3];

  data[0] = 0;     // 0x0C in your example
 80001f6:	2300      	movs	r3, #0
 80001f8:	703b      	strb	r3, [r7, #0]
  data[1] = 0;    // MSB byte of 16bit data
 80001fa:	2300      	movs	r3, #0
 80001fc:	707b      	strb	r3, [r7, #1]
	data[2] = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	70bb      	strb	r3, [r7, #2]

	int count = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f001 fa86 	bl	8001716 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f9af 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 fa5f 	bl	80006d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000212:	f000 fa1d 	bl	8000650 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000216:	f000 fbb5 	bl	8000984 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(4000);
 800021a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800021e:	f001 faef 	bl	8001800 <HAL_Delay>

  //--------------------------------------
  //------- MASTER MODE ------------------
  //--------------------------------------
  	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED){
 8000222:	4b70      	ldr	r3, [pc, #448]	; (80003e4 <main+0x218>)
 8000224:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8000228:	2b03      	cmp	r3, #3
 800022a:	d150      	bne.n	80002ce <main+0x102>
  		module_mode = 0;
 800022c:	4b6e      	ldr	r3, [pc, #440]	; (80003e8 <main+0x21c>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
  		int i = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	61fb      	str	r3, [r7, #28]
  	  while(i<2)
 8000236:	e012      	b.n	800025e <main+0x92>
  		{
  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000238:	2108      	movs	r1, #8
 800023a:	486c      	ldr	r0, [pc, #432]	; (80003ec <main+0x220>)
 800023c:	f001 fd8c 	bl	8001d58 <HAL_GPIO_TogglePin>
  			HAL_Delay(300);
 8000240:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000244:	f001 fadc 	bl	8001800 <HAL_Delay>
  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000248:	2108      	movs	r1, #8
 800024a:	4868      	ldr	r0, [pc, #416]	; (80003ec <main+0x220>)
 800024c:	f001 fd84 	bl	8001d58 <HAL_GPIO_TogglePin>
  			HAL_Delay(300);
 8000250:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000254:	f001 fad4 	bl	8001800 <HAL_Delay>
  			i++;
 8000258:	69fb      	ldr	r3, [r7, #28]
 800025a:	3301      	adds	r3, #1
 800025c:	61fb      	str	r3, [r7, #28]
  	  while(i<2)
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	2b01      	cmp	r3, #1
 8000262:	dde9      	ble.n	8000238 <main+0x6c>
  		}
  		HAL_Delay(500);
 8000264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000268:	f001 faca 	bl	8001800 <HAL_Delay>
  		i = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  	  while(i<127)
 8000270:	e029      	b.n	80002c6 <main+0xfa>
  		{
  		   if(HAL_I2C_Master_Receive(&hi2c1, i, data, 3,20)==HAL_OK)
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	b299      	uxth	r1, r3
 8000276:	463a      	mov	r2, r7
 8000278:	2314      	movs	r3, #20
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2303      	movs	r3, #3
 800027e:	485c      	ldr	r0, [pc, #368]	; (80003f0 <main+0x224>)
 8000280:	f001 fe14 	bl	8001eac <HAL_I2C_Master_Receive>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d11a      	bne.n	80002c0 <main+0xf4>
  		   {
  					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800028a:	2108      	movs	r1, #8
 800028c:	4857      	ldr	r0, [pc, #348]	; (80003ec <main+0x220>)
 800028e:	f001 fd63 	bl	8001d58 <HAL_GPIO_TogglePin>
  				  HAL_Delay(300);
 8000292:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000296:	f001 fab3 	bl	8001800 <HAL_Delay>
  				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800029a:	2108      	movs	r1, #8
 800029c:	4853      	ldr	r0, [pc, #332]	; (80003ec <main+0x220>)
 800029e:	f001 fd5b 	bl	8001d58 <HAL_GPIO_TogglePin>
  				  HAL_Delay(300);
 80002a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002a6:	f001 faab 	bl	8001800 <HAL_Delay>

  				  slave_address[slave_number] = i;
 80002aa:	4b52      	ldr	r3, [pc, #328]	; (80003f4 <main+0x228>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4952      	ldr	r1, [pc, #328]	; (80003f8 <main+0x22c>)
 80002b0:	69fa      	ldr	r2, [r7, #28]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				  slave_number++;
 80002b6:	4b4f      	ldr	r3, [pc, #316]	; (80003f4 <main+0x228>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	4a4d      	ldr	r2, [pc, #308]	; (80003f4 <main+0x228>)
 80002be:	6013      	str	r3, [r2, #0]
  			 }
  			 i++;
 80002c0:	69fb      	ldr	r3, [r7, #28]
 80002c2:	3301      	adds	r3, #1
 80002c4:	61fb      	str	r3, [r7, #28]
  	  while(i<127)
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	2b7e      	cmp	r3, #126	; 0x7e
 80002ca:	ddd2      	ble.n	8000272 <main+0xa6>
 80002cc:	e028      	b.n	8000320 <main+0x154>
  //--------------------------------------
  //-------- SLAVE MODE ------------------
  //--------------------------------------
  	else
  	{
  		I2C_address = idPart1;
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4b4a      	ldr	r3, [pc, #296]	; (80003fc <main+0x230>)
 80002d4:	701a      	strb	r2, [r3, #0]
  		MX_I2C1_Init();
 80002d6:	f000 f9bb 	bl	8000650 <MX_I2C1_Init>
  		while(HAL_I2C_Slave_Transmit(&hi2c1, data, 3, 100)!=HAL_OK) {}
 80002da:	bf00      	nop
 80002dc:	4639      	mov	r1, r7
 80002de:	2364      	movs	r3, #100	; 0x64
 80002e0:	2203      	movs	r2, #3
 80002e2:	4843      	ldr	r0, [pc, #268]	; (80003f0 <main+0x224>)
 80002e4:	f001 fed8 	bl	8002098 <HAL_I2C_Slave_Transmit>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f6      	bne.n	80002dc <main+0x110>
  		int i = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  	  while(i<2)
 80002f2:	e012      	b.n	800031a <main+0x14e>
  		{
  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80002f4:	2108      	movs	r1, #8
 80002f6:	483d      	ldr	r0, [pc, #244]	; (80003ec <main+0x220>)
 80002f8:	f001 fd2e 	bl	8001d58 <HAL_GPIO_TogglePin>
  			HAL_Delay(300);
 80002fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000300:	f001 fa7e 	bl	8001800 <HAL_Delay>
  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000304:	2108      	movs	r1, #8
 8000306:	4839      	ldr	r0, [pc, #228]	; (80003ec <main+0x220>)
 8000308:	f001 fd26 	bl	8001d58 <HAL_GPIO_TogglePin>
  			HAL_Delay(300);
 800030c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000310:	f001 fa76 	bl	8001800 <HAL_Delay>
  			i++;
 8000314:	69bb      	ldr	r3, [r7, #24]
 8000316:	3301      	adds	r3, #1
 8000318:	61bb      	str	r3, [r7, #24]
  	  while(i<2)
 800031a:	69bb      	ldr	r3, [r7, #24]
 800031c:	2b01      	cmp	r3, #1
 800031e:	dde9      	ble.n	80002f4 <main+0x128>
	  			HAL_Delay(1000);
	  		}*/
	  //--------------------------------------
	  //------- MASTER MODE ------------------
	  //--------------------------------------
	  		if(module_mode==0)
 8000320:	4b31      	ldr	r3, [pc, #196]	; (80003e8 <main+0x21c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	f040 80a2 	bne.w	800046e <main+0x2a2>
	  		{
	  			int i =0;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
	  			while (i<slave_number)
 800032e:	e026      	b.n	800037e <main+0x1b2>
	  			{
	  				if(HAL_I2C_Master_Receive(&hi2c1, slave_address[i], data, 3,2)==HAL_OK)
 8000330:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <main+0x22c>)
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	b299      	uxth	r1, r3
 800033a:	463a      	mov	r2, r7
 800033c:	2302      	movs	r3, #2
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2303      	movs	r3, #3
 8000342:	482b      	ldr	r0, [pc, #172]	; (80003f0 <main+0x224>)
 8000344:	f001 fdb2 	bl	8001eac <HAL_I2C_Master_Receive>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d114      	bne.n	8000378 <main+0x1ac>
	  		    {
	  /*					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
	  			    HAL_Delay(300);
	  					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
	  			    HAL_Delay(300);*/
	  					if(data[0]==1)
 800034e:	783b      	ldrb	r3, [r7, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d111      	bne.n	8000378 <main+0x1ac>
	  					{
	  						exti_msg[0] = MIDI_MAKE_EVENT(0, MIDI_EVENT_NOTE_ON, slave_address[i], 100);
 8000354:	4a28      	ldr	r2, [pc, #160]	; (80003f8 <main+0x22c>)
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035c:	041b      	lsls	r3, r3, #16
 800035e:	f043 43c8 	orr.w	r3, r3, #1677721600	; 0x64000000
 8000362:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8000366:	461a      	mov	r2, r3
 8000368:	4b25      	ldr	r3, [pc, #148]	; (8000400 <main+0x234>)
 800036a:	601a      	str	r2, [r3, #0]
	  		        USBD_MIDI_SendEvent(&hUsbDeviceFS, exti_msg[0]);
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <main+0x234>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	481c      	ldr	r0, [pc, #112]	; (80003e4 <main+0x218>)
 8000374:	f001 f921 	bl	80015ba <USBD_MIDI_SendEvent>
	  					}
	  				}
	  				i++;
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	3301      	adds	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
	  			while (i<slave_number)
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <main+0x228>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	429a      	cmp	r2, r3
 8000386:	dbd3      	blt.n	8000330 <main+0x164>
	  			}

	  			n = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000388:	2101      	movs	r1, #1
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f001 fcb3 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	461a      	mov	r2, r3
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <main+0x238>)
 8000398:	601a      	str	r2, [r3, #0]
	        if ((encoder0PinALast == 0) && (n == 1)) {
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <main+0x23c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d151      	bne.n	8000446 <main+0x27a>
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <main+0x238>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d14d      	bne.n	8000446 <main+0x27a>
	          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 80003aa:	2102      	movs	r1, #2
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f001 fca2 	bl	8001cf8 <HAL_GPIO_ReadPin>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d12a      	bne.n	8000410 <main+0x244>
	            if(encoder0Pos>0)
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <main+0x240>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d041      	beq.n	8000446 <main+0x27a>
	  					{
	  						encoder0Pos--;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <main+0x240>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <main+0x240>)
 80003cc:	701a      	strb	r2, [r3, #0]
	  						HAL_Delay(10);
 80003ce:	200a      	movs	r0, #10
 80003d0:	f001 fa16 	bl	8001800 <HAL_Delay>
 80003d4:	e037      	b.n	8000446 <main+0x27a>
 80003d6:	bf00      	nop
 80003d8:	1ffff7ac 	.word	0x1ffff7ac
 80003dc:	1ffff7b0 	.word	0x1ffff7b0
 80003e0:	1ffff7b4 	.word	0x1ffff7b4
 80003e4:	200006bc 	.word	0x200006bc
 80003e8:	20000000 	.word	0x20000000
 80003ec:	48000400 	.word	0x48000400
 80003f0:	20000370 	.word	0x20000370
 80003f4:	20000120 	.word	0x20000120
 80003f8:	20000330 	.word	0x20000330
 80003fc:	20000004 	.word	0x20000004
 8000400:	200006b0 	.word	0x200006b0
 8000404:	2000032c 	.word	0x2000032c
 8000408:	20000124 	.word	0x20000124
 800040c:	20000128 	.word	0x20000128
	  					}
	          } else {
	            if(encoder0Pos<127)
 8000410:	4b4e      	ldr	r3, [pc, #312]	; (800054c <main+0x380>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b7e      	cmp	r3, #126	; 0x7e
 8000416:	d808      	bhi.n	800042a <main+0x25e>
	  					{
	  						encoder0Pos++;
 8000418:	4b4c      	ldr	r3, [pc, #304]	; (800054c <main+0x380>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b4a      	ldr	r3, [pc, #296]	; (800054c <main+0x380>)
 8000422:	701a      	strb	r2, [r3, #0]
	  						HAL_Delay(10);
 8000424:	200a      	movs	r0, #10
 8000426:	f001 f9eb 	bl	8001800 <HAL_Delay>
	  					}
	  					exti_msg[0] = MIDI_MAKE_EVENT(0, MIDI_EVENT_CC, 15, encoder0Pos);
 800042a:	4b48      	ldr	r3, [pc, #288]	; (800054c <main+0x380>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	061b      	lsls	r3, r3, #24
 8000430:	f443 237b 	orr.w	r3, r3, #1028096	; 0xfb000
 8000434:	461a      	mov	r2, r3
 8000436:	4b46      	ldr	r3, [pc, #280]	; (8000550 <main+0x384>)
 8000438:	601a      	str	r2, [r3, #0]
	  		      USBD_MIDI_SendEvent(&hUsbDeviceFS, exti_msg[0]);
 800043a:	4b45      	ldr	r3, [pc, #276]	; (8000550 <main+0x384>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4619      	mov	r1, r3
 8000440:	4844      	ldr	r0, [pc, #272]	; (8000554 <main+0x388>)
 8000442:	f001 f8ba 	bl	80015ba <USBD_MIDI_SendEvent>
	          }
	        }
	        encoder0PinALast = n;
 8000446:	4b44      	ldr	r3, [pc, #272]	; (8000558 <main+0x38c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a44      	ldr	r2, [pc, #272]	; (800055c <main+0x390>)
 800044c:	6013      	str	r3, [r2, #0]
	  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800044e:	2108      	movs	r1, #8
 8000450:	4843      	ldr	r0, [pc, #268]	; (8000560 <main+0x394>)
 8000452:	f001 fc81 	bl	8001d58 <HAL_GPIO_TogglePin>
	  			HAL_Delay(3000);
 8000456:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800045a:	f001 f9d1 	bl	8001800 <HAL_Delay>
	  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800045e:	2108      	movs	r1, #8
 8000460:	483f      	ldr	r0, [pc, #252]	; (8000560 <main+0x394>)
 8000462:	f001 fc79 	bl	8001d58 <HAL_GPIO_TogglePin>
	  			HAL_Delay(300);
 8000466:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800046a:	f001 f9c9 	bl	8001800 <HAL_Delay>
	  		}

	  //--------------------------------------
	  //-------- SLAVE MODE ------------------
	  //--------------------------------------
	  		if(module_mode==1)
 800046e:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <main+0x398>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	f47f af54 	bne.w	8000320 <main+0x154>
	  			}
	  			if(HAL_I2C_Slave_Transmit(&hi2c1, data, 3, 100)==HAL_OK) {
	  				if(data[0]==1) data[0] = 0;
	  			}
	  			HAL_Delay(1);*/
	  			HAL_I2C_Slave_Transmit(&hi2c1, data, 3, 2);
 8000478:	4639      	mov	r1, r7
 800047a:	2302      	movs	r3, #2
 800047c:	2203      	movs	r2, #3
 800047e:	483a      	ldr	r0, [pc, #232]	; (8000568 <main+0x39c>)
 8000480:	f001 fe0a 	bl	8002098 <HAL_I2C_Slave_Transmit>
	  			n = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000484:	2101      	movs	r1, #1
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f001 fc35 	bl	8001cf8 <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <main+0x38c>)
 8000494:	601a      	str	r2, [r3, #0]
	        if ((encoder0PinALast == 0) && (n == 1)) {
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <main+0x390>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d150      	bne.n	8000540 <main+0x374>
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <main+0x38c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d14c      	bne.n	8000540 <main+0x374>
	          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 80004a6:	2102      	movs	r1, #2
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ac:	f001 fc24 	bl	8001cf8 <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11a      	bne.n	80004ec <main+0x320>
	            if(encoder0Pos>0)
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <main+0x380>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d040      	beq.n	8000540 <main+0x374>
	  					{
	  						encoder0Pos--;
 80004be:	4b23      	ldr	r3, [pc, #140]	; (800054c <main+0x380>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <main+0x380>)
 80004c8:	701a      	strb	r2, [r3, #0]
	  						HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80004ca:	2108      	movs	r1, #8
 80004cc:	4824      	ldr	r0, [pc, #144]	; (8000560 <main+0x394>)
 80004ce:	f001 fc43 	bl	8001d58 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 80004d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004d6:	f001 f993 	bl	8001800 <HAL_Delay>
	  					  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80004da:	2108      	movs	r1, #8
 80004dc:	4820      	ldr	r0, [pc, #128]	; (8000560 <main+0x394>)
 80004de:	f001 fc3b 	bl	8001d58 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 80004e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004e6:	f001 f98b 	bl	8001800 <HAL_Delay>
 80004ea:	e029      	b.n	8000540 <main+0x374>
	  					}
	          } else {
	            if(encoder0Pos<127)
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <main+0x380>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b7e      	cmp	r3, #126	; 0x7e
 80004f2:	d825      	bhi.n	8000540 <main+0x374>
	  					{
	  						encoder0Pos++;
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <main+0x380>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x380>)
 80004fe:	701a      	strb	r2, [r3, #0]
	  						HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000500:	2108      	movs	r1, #8
 8000502:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0x394>)
 8000504:	f001 fc28 	bl	8001d58 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 8000508:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800050c:	f001 f978 	bl	8001800 <HAL_Delay>
	  					  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000510:	2108      	movs	r1, #8
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <main+0x394>)
 8000514:	f001 fc20 	bl	8001d58 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 8000518:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800051c:	f001 f970 	bl	8001800 <HAL_Delay>
	  						HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000520:	2108      	movs	r1, #8
 8000522:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x394>)
 8000524:	f001 fc18 	bl	8001d58 <HAL_GPIO_TogglePin>
	  				    HAL_Delay(300);
 8000528:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800052c:	f001 f968 	bl	8001800 <HAL_Delay>
	  				    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000530:	2108      	movs	r1, #8
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x394>)
 8000534:	f001 fc10 	bl	8001d58 <HAL_GPIO_TogglePin>
	  				    HAL_Delay(300);
 8000538:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800053c:	f001 f960 	bl	8001800 <HAL_Delay>
	  					}
	          }
	        }
	        encoder0PinALast = n;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <main+0x38c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <main+0x390>)
 8000546:	6013      	str	r3, [r2, #0]
	  		if(module_mode==0)
 8000548:	e6ea      	b.n	8000320 <main+0x154>
 800054a:	bf00      	nop
 800054c:	20000128 	.word	0x20000128
 8000550:	200006b0 	.word	0x200006b0
 8000554:	200006bc 	.word	0x200006bc
 8000558:	2000032c 	.word	0x2000032c
 800055c:	20000124 	.word	0x20000124
 8000560:	48000400 	.word	0x48000400
 8000564:	20000000 	.word	0x20000000
 8000568:	20000370 	.word	0x20000370

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b0a4      	sub	sp, #144	; 0x90
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fe6a 	bl	8006254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fe5c 	bl	8006254 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a0:	f002 fc7e 	bl	8002ea0 <HAL_PWREx_ControlVoltageScaling>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x42>
  {
    Error_Handler();
 80005aa:	f000 f8dd 	bl	8000768 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80005ae:	2312      	movs	r3, #18
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005c4:	23b0      	movs	r3, #176	; 0xb0
 80005c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fcad 	bl	8002f4c <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005f8:	f000 f8b6 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f8fe 	bl	8003818 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000622:	f000 f8a1 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000626:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800062a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000630:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fabb 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000644:	f000 f890 	bl	8000768 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3790      	adds	r7, #144	; 0x90
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f001 fb7e 	bl	8001d8c <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 f867 	bl	8000768 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f001 ffe5 	bl	800266c <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 f85e 	bl	8000768 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f002 f827 	bl	8002702 <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f855 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000370 	.word	0x20000370
 80006c8:	40005400 	.word	0x40005400
 80006cc:	10909cec 	.word	0x10909cec

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_GPIO_Init+0x90>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <MX_GPIO_Init+0x90>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_GPIO_Init+0x90>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_GPIO_Init+0x90>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_GPIO_Init+0x90>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_GPIO_Init+0x90>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2108      	movs	r1, #8
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <MX_GPIO_Init+0x94>)
 800071c:	f001 fb04 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000720:	2303      	movs	r3, #3
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f001 f96d 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800073a:	2308      	movs	r3, #8
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0x94>)
 8000752:	f001 f95f 	bl	8001a14 <HAL_GPIO_Init>

}
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	; 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	; 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_I2C_MspInit+0x7c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d127      	bne.n	800082e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_I2C_MspInit+0x80>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <HAL_I2C_MspInit+0x80>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_I2C_MspInit+0x80>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f6:	23c0      	movs	r3, #192	; 0xc0
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fa:	2312      	movs	r3, #18
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000806:	2304      	movs	r3, #4
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <HAL_I2C_MspInit+0x84>)
 8000812:	f001 f8ff 	bl	8001a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_I2C_MspInit+0x80>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_I2C_MspInit+0x80>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_I2C_MspInit+0x80>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40005400 	.word	0x40005400
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400

08000844 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_PCD_MspInit+0x80>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d129      	bne.n	80008ba <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_PCD_MspInit+0x84>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_PCD_MspInit+0x84>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_PCD_MspInit+0x84>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800087e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8000890:	230a      	movs	r3, #10
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f001 f8b9 	bl	8001a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_PCD_MspInit+0x84>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_PCD_MspInit+0x84>)
 80008a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ac:	6593      	str	r3, [r2, #88]	; 0x58
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_PCD_MspInit+0x84>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40006800 	.word	0x40006800
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 ff52 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <SystemInit+0x5c>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <SystemInit+0x5c>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <SystemInit+0x60>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a11      	ldr	r2, [pc, #68]	; (8000980 <SystemInit+0x60>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <SystemInit+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <SystemInit+0x60>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <SystemInit+0x60>)
 800094c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000950:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000954:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <SystemInit+0x60>)
 8000958:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800095c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <SystemInit+0x60>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a07      	ldr	r2, [pc, #28]	; (8000980 <SystemInit+0x60>)
 8000964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000968:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <SystemInit+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	40021000 	.word	0x40021000

08000984 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8000988:	2200      	movs	r2, #0
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <MX_USB_DEVICE_Init+0x28>)
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_USB_DEVICE_Init+0x2c>)
 800098e:	f000 fa1d 	bl	8000dcc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <MX_USB_DEVICE_Init+0x30>)
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_USB_DEVICE_Init+0x2c>)
 8000996:	f000 fa44 	bl	8000e22 <USBD_RegisterClass>

  USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_MIDI_fops_FS);
 800099a:	4907      	ldr	r1, [pc, #28]	; (80009b8 <MX_USB_DEVICE_Init+0x34>)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_USB_DEVICE_Init+0x2c>)
 800099e:	f000 fdf9 	bl	8001594 <USBD_MIDI_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_USB_DEVICE_Init+0x2c>)
 80009a4:	f000 fa57 	bl	8000e56 <USBD_Start>

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	200006bc 	.word	0x200006bc
 80009b4:	20000040 	.word	0x20000040
 80009b8:	200000ec 	.word	0x200000ec

080009bc <USBD_LL_Init>:
  * @param  pdev: Device handle
  * @retval USBD Status
  */

USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 80009c4:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009d0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <USBD_LL_Init+0xa8>)
 80009d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009dc:	2208      	movs	r2, #8
 80009de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_32;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <USBD_LL_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <USBD_LL_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <USBD_LL_Init+0xa4>)
 8000a06:	f001 fec8 	bl	800279a <HAL_PCD_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <USBD_LL_Init+0x58>
  {
    Error_Handler();
 8000a10:	f7ff feaa 	bl	8000768 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f002 f9c2 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000a2a:	2360      	movs	r3, #96	; 0x60
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	f002 f9ba 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xA0);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000a3a:	23a0      	movs	r3, #160	; 0xa0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	f002 f9b2 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xE0);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000a4a:	23e0      	movs	r3, #224	; 0xe0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2181      	movs	r1, #129	; 0x81
 8000a50:	f002 f9aa 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200003bc 	.word	0x200003bc
 8000a64:	40006800 	.word	0x40006800

08000a68 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 ff9d 	bl	80029be <HAL_PCD_Start>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d816      	bhi.n	8000abc <USBD_LL_Start+0x54>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <USBD_LL_Start+0x2c>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000aa5 	.word	0x08000aa5
 8000a98:	08000aab 	.word	0x08000aab
 8000a9c:	08000ab1 	.word	0x08000ab1
 8000aa0:	08000ab7 	.word	0x08000ab7
    case HAL_OK :
      usb_status = USBD_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8000aa8:	e00b      	b.n	8000ac2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	73fb      	strb	r3, [r7, #15]
    break;
 8000aae:	e008      	b.n	8000ac2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8000ab4:	e005      	b.n	8000ac2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8000aba:	e002      	b.n	8000ac2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8000abc:	2302      	movs	r3, #2
 8000abe:	73fb      	strb	r3, [r7, #15]
    break;
 8000ac0:	bf00      	nop
  }
  return usb_status;  
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	70fb      	strb	r3, [r7, #3]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	70bb      	strb	r3, [r7, #2]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000af4:	78bb      	ldrb	r3, [r7, #2]
 8000af6:	883a      	ldrh	r2, [r7, #0]
 8000af8:	78f9      	ldrb	r1, [r7, #3]
 8000afa:	f001 ff82 	bl	8002a02 <HAL_PCD_EP_Open>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d817      	bhi.n	8000b38 <USBD_LL_OpenEP+0x6c>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <USBD_LL_OpenEP+0x44>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b27 	.word	0x08000b27
 8000b18:	08000b2d 	.word	0x08000b2d
 8000b1c:	08000b33 	.word	0x08000b33
    case HAL_OK :
      usb_status = USBD_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
    break;
 8000b24:	e00b      	b.n	8000b3e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000b26:	2302      	movs	r3, #2
 8000b28:	73fb      	strb	r3, [r7, #15]
    break;
 8000b2a:	e008      	b.n	8000b3e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8000b30:	e005      	b.n	8000b3e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000b32:	2302      	movs	r3, #2
 8000b34:	73fb      	strb	r3, [r7, #15]
    break;
 8000b36:	e002      	b.n	8000b3e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8000b3c:	bf00      	nop
  }
  return usb_status; 
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000b62:	78fa      	ldrb	r2, [r7, #3]
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 ffb1 	bl	8002ace <HAL_PCD_EP_Close>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d816      	bhi.n	8000ba4 <USBD_LL_CloseEP+0x5c>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <USBD_LL_CloseEP+0x34>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000b93 	.word	0x08000b93
 8000b84:	08000b99 	.word	0x08000b99
 8000b88:	08000b9f 	.word	0x08000b9f
    case HAL_OK :
      usb_status = USBD_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8000b90:	e00b      	b.n	8000baa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000b92:	2302      	movs	r3, #2
 8000b94:	73fb      	strb	r3, [r7, #15]
    break;
 8000b96:	e008      	b.n	8000baa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8000b9c:	e005      	b.n	8000baa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8000ba2:	e002      	b.n	8000baa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8000ba8:	bf00      	nop
  }
  return usb_status;  
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000bce:	78fa      	ldrb	r2, [r7, #3]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 f8bb 	bl	8002d4e <HAL_PCD_EP_Flush>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d816      	bhi.n	8000c10 <USBD_LL_FlushEP+0x5c>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <USBD_LL_FlushEP+0x34>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000bf9 	.word	0x08000bf9
 8000bec:	08000bff 	.word	0x08000bff
 8000bf0:	08000c05 	.word	0x08000c05
 8000bf4:	08000c0b 	.word	0x08000c0b
    case HAL_OK :
      usb_status = USBD_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8000bfc:	e00b      	b.n	8000c16 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	73fb      	strb	r3, [r7, #15]
    break;
 8000c02:	e008      	b.n	8000c16 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
    break;
 8000c08:	e005      	b.n	8000c16 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8000c0e:	e002      	b.n	8000c16 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8000c10:	2302      	movs	r3, #2
 8000c12:	73fb      	strb	r3, [r7, #15]
    break;
 8000c14:	bf00      	nop
  }
  return usb_status;  
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000c3a:	78fa      	ldrb	r2, [r7, #3]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f825 	bl	8002c8e <HAL_PCD_EP_SetStall>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d816      	bhi.n	8000c7c <USBD_LL_StallEP+0x5c>
 8000c4e:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <USBD_LL_StallEP+0x34>)
 8000c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c54:	08000c65 	.word	0x08000c65
 8000c58:	08000c6b 	.word	0x08000c6b
 8000c5c:	08000c71 	.word	0x08000c71
 8000c60:	08000c77 	.word	0x08000c77
    case HAL_OK :
      usb_status = USBD_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
    break;
 8000c68:	e00b      	b.n	8000c82 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8000c6e:	e008      	b.n	8000c82 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
    break;
 8000c74:	e005      	b.n	8000c82 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000c76:	2302      	movs	r3, #2
 8000c78:	73fb      	strb	r3, [r7, #15]
    break;
 8000c7a:	e002      	b.n	8000c82 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8000c80:	bf00      	nop
  }
  return usb_status;  
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	461a      	mov	r2, r3
 8000c98:	460b      	mov	r3, r1
 8000c9a:	72fb      	strb	r3, [r7, #11]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000cae:	893b      	ldrh	r3, [r7, #8]
 8000cb0:	7af9      	ldrb	r1, [r7, #11]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	f001 ffa8 	bl	8002c08 <HAL_PCD_EP_Transmit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8000cbc:	7dbb      	ldrb	r3, [r7, #22]
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d816      	bhi.n	8000cf0 <USBD_LL_Transmit+0x64>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <USBD_LL_Transmit+0x3c>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000cd9 	.word	0x08000cd9
 8000ccc:	08000cdf 	.word	0x08000cdf
 8000cd0:	08000ce5 	.word	0x08000ce5
 8000cd4:	08000ceb 	.word	0x08000ceb
    case HAL_OK :
      usb_status = USBD_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
    break;
 8000cdc:	e00b      	b.n	8000cf6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	75fb      	strb	r3, [r7, #23]
    break;
 8000ce2:	e008      	b.n	8000cf6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
    break;
 8000ce8:	e005      	b.n	8000cf6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000cea:	2302      	movs	r3, #2
 8000cec:	75fb      	strb	r3, [r7, #23]
    break;
 8000cee:	e002      	b.n	8000cf6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	75fb      	strb	r3, [r7, #23]
    break;
 8000cf4:	bf00      	nop
  }
  return usb_status;    
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	72fb      	strb	r3, [r7, #11]
 8000d10:	4613      	mov	r3, r2
 8000d12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000d22:	893b      	ldrh	r3, [r7, #8]
 8000d24:	7af9      	ldrb	r1, [r7, #11]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	f001 ff19 	bl	8002b5e <HAL_PCD_EP_Receive>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8000d30:	7dbb      	ldrb	r3, [r7, #22]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d816      	bhi.n	8000d64 <USBD_LL_PrepareReceive+0x64>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <USBD_LL_PrepareReceive+0x3c>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d4d 	.word	0x08000d4d
 8000d40:	08000d53 	.word	0x08000d53
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000d5f 	.word	0x08000d5f
    case HAL_OK :
      usb_status = USBD_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	75fb      	strb	r3, [r7, #23]
    break;
 8000d50:	e00b      	b.n	8000d6a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000d52:	2302      	movs	r3, #2
 8000d54:	75fb      	strb	r3, [r7, #23]
    break;
 8000d56:	e008      	b.n	8000d6a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	75fb      	strb	r3, [r7, #23]
    break;
 8000d5c:	e005      	b.n	8000d6a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	75fb      	strb	r3, [r7, #23]
    break;
 8000d62:	e002      	b.n	8000d6a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8000d64:	2302      	movs	r3, #2
 8000d66:	75fb      	strb	r3, [r7, #23]
    break;
 8000d68:	bf00      	nop
  }
  return usb_status; 
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000d86:	78fa      	ldrb	r2, [r7, #3]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 ff24 	bl	8002bd8 <HAL_PCD_EP_GetRxCount>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    that it is an even number and higher than 3 
	AUDIO_OUT_PACKET_NUM = 80
  */  
  static uint8_t mem[512];
  /* USER CODE END 4 */
  return mem;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <USBD_static_malloc+0x18>)
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2000012c 	.word	0x2000012c

08000db8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8000de0:	2302      	movs	r3, #2
 8000de2:	e01a      	b.n	8000e1a <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff fdd2 	bl	80009bc <USBD_LL_Init>
  
  return USBD_OK; 
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e001      	b.n	8000e48 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8000e44:	2302      	movs	r3, #2
 8000e46:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fe02 	bl	8000a68 <USBD_LL_Start>
  
  return USBD_OK;  
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fed0 	bl	8000c20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fecc 	bl	8000c20 <USBD_LL_StallEP>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d033      	beq.n	8000f0e <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 f835 	bl	8000f16 <USBD_GetLen>
 8000eac:	4603      	mov	r3, r0
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	1c59      	adds	r1, r3, #1
 8000ec2:	75f9      	strb	r1, [r7, #23]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	440b      	add	r3, r1
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	75fa      	strb	r2, [r7, #23]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4413      	add	r3, r2
 8000eda:	2203      	movs	r2, #3
 8000edc:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8000ede:	e012      	b.n	8000f06 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60fa      	str	r2, [r7, #12]
 8000ee6:	7dfa      	ldrb	r2, [r7, #23]
 8000ee8:	1c51      	adds	r1, r2, #1
 8000eea:	75f9      	strb	r1, [r7, #23]
 8000eec:	4611      	mov	r1, r2
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	440a      	add	r2, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	75fa      	strb	r2, [r7, #23]
 8000efc:	461a      	mov	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e8      	bne.n	8000ee0 <USBD_GetString+0x50>
    }
  } 
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8000f22:	e005      	b.n	8000f30 <USBD_GetLen+0x1a>
    {
        len++;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	3301      	adds	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
        buf++;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f5      	bne.n	8000f24 <USBD_GetLen+0xe>
    }

    return len;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2212      	movs	r2, #18
 8000f58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20000028 	.word	0x20000028

08000f6c <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000f7e:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	2000003c 	.word	0x2000003c

08000f90 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8000fa6:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8000fa8:	f7ff ff72 	bl	8000e90 <USBD_GetString>
 8000fac:	e004      	b.n	8000fb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8000fb4:	f7ff ff6c 	bl	8000e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200008e0 	.word	0x200008e0
 8000fc8:	0800627c 	.word	0x0800627c

08000fcc <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000fde:	f7ff ff57 	bl	8000e90 <USBD_GetString>
  return USBD_StrDesc;
 8000fe2:	4b02      	ldr	r3, [pc, #8]	; (8000fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200008e0 	.word	0x200008e0
 8000ff0:	08006290 	.word	0x08006290

08000ff4 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d105      	bne.n	8001012 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <USBD_FS_SerialStrDescriptor+0x34>)
 800100a:	4808      	ldr	r0, [pc, #32]	; (800102c <USBD_FS_SerialStrDescriptor+0x38>)
 800100c:	f7ff ff40 	bl	8000e90 <USBD_GetString>
 8001010:	e004      	b.n	800101c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4904      	ldr	r1, [pc, #16]	; (8001028 <USBD_FS_SerialStrDescriptor+0x34>)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <USBD_FS_SerialStrDescriptor+0x38>)
 8001018:	f7ff ff3a 	bl	8000e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800101c:	4b02      	ldr	r3, [pc, #8]	; (8001028 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200008e0 	.word	0x200008e0
 800102c:	080062a4 	.word	0x080062a4

08001030 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001048:	f7ff ff22 	bl	8000e90 <USBD_GetString>
 800104c:	e004      	b.n	8001058 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001054:	f7ff ff1c 	bl	8000e90 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200008e0 	.word	0x200008e0
 8001068:	080062b4 	.word	0x080062b4

0800106c <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d105      	bne.n	800108a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001084:	f7ff ff04 	bl	8000e90 <USBD_GetString>
 8001088:	e004      	b.n	8001094 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	4904      	ldr	r1, [pc, #16]	; (80010a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001090:	f7ff fefe 	bl	8000e90 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200008e0 	.word	0x200008e0
 80010a4:	080062c4 	.word	0x080062c4

080010a8 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	4613      	mov	r3, r2
 80010b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2202      	movs	r2, #2
 80010ba:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80010c4:	88fa      	ldrh	r2, [r7, #6]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	2100      	movs	r1, #0
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff fddb 	bl	8000c8c <USBD_LL_Transmit>
  
  return USBD_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *haudio;
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	2202      	movs	r2, #2
 80010f0:	2101      	movs	r1, #1
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fcea 	bl	8000acc <USBD_LL_OpenEP>
                 MIDI_OUT_EP,
                 USBD_EP_TYPE_BULK,
                 MIDI_OUT_PACKET);
                
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	2202      	movs	r2, #2
 80010fc:	2181      	movs	r1, #129	; 0x81
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fce4 	bl	8000acc <USBD_LL_OpenEP>
                 MIDI_IN_EP,
                 USBD_EP_TYPE_BULK,
                 MIDI_IN_PACKET);
  
  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8001104:	20cc      	movs	r0, #204	; 0xcc
 8001106:	f7ff fe49 	bl	8000d9c <USBD_static_malloc>
 800110a:	4602      	mov	r2, r0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <USBD_MIDI_Init+0x40>
  {
    return USBD_FAIL; 
 800111c:	2302      	movs	r3, #2
 800111e:	e02d      	b.n	800117c <USBD_MIDI_Init+0x9c>
  }
  else
  {
    haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001126:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
    haudio->wr_ptr = 0; 
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    haudio->rd_ptr = 0;  
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    haudio->tx_state = 0;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    haudio->tx_connection = MIDI_TX_UNKNOWN;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2202      	movs	r2, #2
 800114a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    haudio->tx_timeout = 0;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
    
    /* Initialize the Audio output Hardware layer */
    if (((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Init(0) != USBD_OK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2000      	movs	r0, #0
 8001160:	4798      	blx	r3
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <USBD_MIDI_Init+0x8c>
    {
      return USBD_FAIL;
 8001168:	2302      	movs	r3, #2
 800116a:	e007      	b.n	800117c <USBD_MIDI_Init+0x9c>
    }
    
    /* Prepare Out endpoint to receive 1st packet */ 
    USBD_LL_PrepareReceive(pdev,
                           MIDI_OUT_EP,
                           (uint8_t*)haudio->rx_buffer,                        
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1d1a      	adds	r2, r3, #4
    USBD_LL_PrepareReceive(pdev,
 8001170:	2340      	movs	r3, #64	; 0x40
 8001172:	2101      	movs	r1, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fdc3 	bl	8000d00 <USBD_LL_PrepareReceive>
                           MIDI_OUT_PACKET);      
  }
  return USBD_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
  
  /* Close EP OUT */
  USBD_LL_CloseEP(pdev,
 8001190:	2101      	movs	r1, #1
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fcd8 	bl	8000b48 <USBD_LL_CloseEP>
              MIDI_OUT_EP);
              
  /* Close EP IN */            
  USBD_LL_CloseEP(pdev,
 8001198:	2181      	movs	r1, #129	; 0x81
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fcd4 	bl	8000b48 <USBD_LL_CloseEP>
              MIDI_IN_EP);

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00f      	beq.n	80011ca <USBD_MIDI_DeInit+0x46>
  {
   ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->DeInit(0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2000      	movs	r0, #0
 80011b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fdfb 	bl	8000db8 <USBD_static_free>
    pdev->pClassData = NULL;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return USBD_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  USBD_MIDI_HandleTypeDef   *haudio;
  uint8_t ret = USBD_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80011e8:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d008      	beq.n	8001208 <USBD_MIDI_Setup+0x34>
 80011f6:	2b20      	cmp	r3, #32
 80011f8:	d12b      	bne.n	8001252 <USBD_MIDI_Setup+0x7e>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
    {
    default:
      USBD_CtlError (pdev, req);
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fe36 	bl	8000e6e <USBD_CtlError>
      ret = USBD_FAIL; 
 8001202:	2302      	movs	r3, #2
 8001204:	73fb      	strb	r3, [r7, #15]
    }
    break;
 8001206:	e024      	b.n	8001252 <USBD_MIDI_Setup+0x7e>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d002      	beq.n	8001216 <USBD_MIDI_Setup+0x42>
 8001210:	2b0b      	cmp	r3, #11
 8001212:	d007      	beq.n	8001224 <USBD_MIDI_Setup+0x50>
 8001214:	e017      	b.n	8001246 <USBD_MIDI_Setup+0x72>
    {
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&(haudio->alt_setting),
 8001216:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff43 	bl	80010a8 <USBD_CtlSendData>
                        1);
      break;
 8001222:	e016      	b.n	8001252 <USBD_MIDI_Setup+0x7e>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	885b      	ldrh	r3, [r3, #2]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d806      	bhi.n	800123c <USBD_MIDI_Setup+0x68>
      {
        haudio->alt_setting = (uint8_t)(req->wValue);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;      
 800123a:	e00a      	b.n	8001252 <USBD_MIDI_Setup+0x7e>
        USBD_CtlError (pdev, req);
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fe15 	bl	8000e6e <USBD_CtlError>
      break;      
 8001244:	e005      	b.n	8001252 <USBD_MIDI_Setup+0x7e>
      
    default:
      USBD_CtlError (pdev, req);
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fe10 	bl	8000e6e <USBD_CtlError>
      ret = USBD_FAIL;     
 800124e:	2302      	movs	r3, #2
 8001250:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2265      	movs	r2, #101	; 0x65
 8001268:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000078 	.word	0x20000078

0800127c <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *haudio;
  USBD_MIDI_ItfTypeDef      *haudio_itf;
  haudio_itf = (USBD_MIDI_ItfTypeDef*)pdev->pUserData;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800128e:	60fb      	str	r3, [r7, #12]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001296:	60bb      	str	r3, [r7, #8]
  
  if (haudio != NULL && (epnum & 0x7F) == (MIDI_IN_EP & 0x7F))
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01d      	beq.n	80012da <USBD_MIDI_DataIn+0x5e>
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d118      	bne.n	80012da <USBD_MIDI_DataIn+0x5e>
  {
      haudio->tx_state = 0;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      haudio->tx_timeout = 0;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      if(haudio->tx_connection != MIDI_TX_CONNECTED){
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d007      	beq.n	80012d4 <USBD_MIDI_DataIn+0x58>
        haudio->tx_connection = MIDI_TX_CONNECTED;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        haudio_itf->StatusTX(MIDI_TX_CONNECTED);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2001      	movs	r0, #1
 80012d2:	4798      	blx	r3
      }
      USBD_MIDI_SetupTransfer(pdev);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f88f 	bl	80013f8 <USBD_MIDI_SetupTransfer>
  }
  return USBD_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <USBD_MIDI_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <USBD_MIDI_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <USBD_MIDI_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_SOF (USBD_HandleTypeDef *pdev)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *haudio;
  USBD_MIDI_ItfTypeDef      *haudio_itf;
  haudio_itf = (USBD_MIDI_ItfTypeDef*)pdev->pUserData;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800131e:	60fb      	str	r3, [r7, #12]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001326:	60bb      	str	r3, [r7, #8]
  
  if (haudio != NULL && haudio->tx_state != 0)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d025      	beq.n	800137a <USBD_MIDI_SOF+0x6a>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01f      	beq.n	800137a <USBD_MIDI_SOF+0x6a>
  {
      haudio->tx_timeout++;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8001340:	b2db      	uxtb	r3, r3
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      if(haudio->tx_timeout > 10)USBD_MIDI_FlushTX(pdev);
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b0a      	cmp	r3, #10
 8001356:	d902      	bls.n	800135e <USBD_MIDI_SOF+0x4e>
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f813 	bl	8001384 <USBD_MIDI_FlushTX>

        if(haudio->tx_connection != MIDI_TX_DISCONNECTED){
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <USBD_MIDI_SOF+0x6a>
          haudio->tx_connection = MIDI_TX_DISCONNECTED;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
          haudio_itf->StatusTX(MIDI_TX_DISCONNECTED);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2000      	movs	r0, #0
 8001378:	4798      	blx	r3
      }
  }
  return USBD_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <USBD_MIDI_FlushTX>:

static void USBD_MIDI_FlushTX(USBD_HandleTypeDef *pdev){
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *haudio;
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001392:	617b      	str	r3, [r7, #20]
  USBD_LL_FlushEP(pdev,MIDI_IN_EP);
 8001394:	2181      	movs	r1, #129	; 0x81
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fc0c 	bl	8000bb4 <USBD_LL_FlushEP>
  haudio->rd_ptr = haudio->wr_ptr;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  haudio->tx_state = 0;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
  
  /* F0 USB specific - stop TX EP */
  PCD_HandleTypeDef* hpcd = (PCD_HandleTypeDef*)(pdev->pData);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80013b6:	613b      	str	r3, [r7, #16]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, MIDI_IN_EP & 0x7F, USB_EP_TX_NAK);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3304      	adds	r3, #4
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ca:	81fb      	strh	r3, [r7, #14]
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	f083 0320 	eor.w	r3, r3, #32
 80013d2:	81fb      	strh	r3, [r7, #14]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1d1a      	adds	r2, r3, #4
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	8013      	strh	r3, [r2, #0]
  //USBD_LL_Transmit(pdev, MIDI_IN_EP, (uint8_t*)haudio->tx_buffer_rd, 0);
}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <USBD_MIDI_SetupTransfer>:

static void USBD_MIDI_SetupTransfer(USBD_HandleTypeDef *pdev){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *haudio;
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001406:	60bb      	str	r3, [r7, #8]
  if(haudio && haudio->tx_state == 0 && haudio->rd_ptr != haudio->wr_ptr){
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d055      	beq.n	80014ba <USBD_MIDI_SetupTransfer+0xc2>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d14f      	bne.n	80014ba <USBD_MIDI_SetupTransfer+0xc2>
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001420:	b29a      	uxth	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001428:	429a      	cmp	r2, r3
 800142a:	d046      	beq.n	80014ba <USBD_MIDI_SetupTransfer+0xc2>
    uint16_t i = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	81fb      	strh	r3, [r7, #14]
    uint16_t new_rd_ptr = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	81bb      	strh	r3, [r7, #12]
    for(i = 0; i < MIDI_TOTAL_BUF_SIZE;++i){
 8001434:	2300      	movs	r3, #0
 8001436:	81fb      	strh	r3, [r7, #14]
 8001438:	e02e      	b.n	8001498 <USBD_MIDI_SetupTransfer+0xa0>
      haudio->tx_buffer_rd[i] = haudio->tx_buffer_wr[haudio->rd_ptr];
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001440:	b29b      	uxth	r3, r3
 8001442:	89f8      	ldrh	r0, [r7, #14]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	3320      	adds	r3, #32
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	f100 0310 	add.w	r3, r0, #16
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	605a      	str	r2, [r3, #4]
    
      new_rd_ptr = haudio->rd_ptr+1;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001460:	b29b      	uxth	r3, r3
 8001462:	3301      	adds	r3, #1
 8001464:	81bb      	strh	r3, [r7, #12]
      
      if(new_rd_ptr >= MIDI_TOTAL_BUF_SIZE){ 
 8001466:	89bb      	ldrh	r3, [r7, #12]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d901      	bls.n	8001470 <USBD_MIDI_SetupTransfer+0x78>
        new_rd_ptr = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	81bb      	strh	r3, [r7, #12]
      }
      haudio->rd_ptr = new_rd_ptr;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	89ba      	ldrh	r2, [r7, #12]
 8001474:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      if(haudio->rd_ptr == haudio->wr_ptr){
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800147e:	b29a      	uxth	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001486:	429a      	cmp	r2, r3
 8001488:	d103      	bne.n	8001492 <USBD_MIDI_SetupTransfer+0x9a>
        ++i;
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	81fb      	strh	r3, [r7, #14]
        break;
 8001490:	e005      	b.n	800149e <USBD_MIDI_SetupTransfer+0xa6>
    for(i = 0; i < MIDI_TOTAL_BUF_SIZE;++i){
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	3301      	adds	r3, #1
 8001496:	81fb      	strh	r3, [r7, #14]
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d9cd      	bls.n	800143a <USBD_MIDI_SetupTransfer+0x42>
      }
    }
    
    haudio->tx_state = 1;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    USBD_LL_Transmit(pdev, MIDI_IN_EP, (uint8_t*)haudio->tx_buffer_rd, i*4);
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2181      	movs	r1, #129	; 0x81
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fbe9 	bl	8000c8c <USBD_LL_Transmit>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <USBD_MIDI_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <USBD_MIDI_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <USBD_MIDI_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *haudio;
  USBD_MIDI_ItfTypeDef      *haudio_itf;
  haudio_itf = (USBD_MIDI_ItfTypeDef*)pdev->pUserData;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001508:	613b      	str	r3, [r7, #16]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001510:	60fb      	str	r3, [r7, #12]
  
  if (epnum == MIDI_OUT_EP)
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d128      	bne.n	800156a <USBD_MIDI_DataOut+0x74>
  {
    
    uint8_t message_count = USBD_LL_GetRxDataSize (pdev, epnum);
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fc29 	bl	8000d74 <USBD_LL_GetRxDataSize>
 8001522:	4603      	mov	r3, r0
 8001524:	72fb      	strb	r3, [r7, #11]
    
    if((message_count & 0x3) == 0){
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d115      	bne.n	800155c <USBD_MIDI_DataOut+0x66>
      uint8_t i;
      message_count >>= 2;
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	72fb      	strb	r3, [r7, #11]
      for(i = 0;i < message_count;++i){
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
 800153a:	e00b      	b.n	8001554 <USBD_MIDI_DataOut+0x5e>
        haudio_itf->EventOUT(haudio->rx_buffer[i]);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	4790      	blx	r2
      for(i = 0;i < message_count;++i){
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	3301      	adds	r3, #1
 8001552:	75fb      	strb	r3, [r7, #23]
 8001554:	7dfa      	ldrb	r2, [r7, #23]
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3ef      	bcc.n	800153c <USBD_MIDI_DataOut+0x46>
    }
    
    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev,
                           MIDI_OUT_EP,
                           (uint8_t*)haudio->rx_buffer, 
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1d1a      	adds	r2, r3, #4
    USBD_LL_PrepareReceive(pdev,
 8001560:	2340      	movs	r3, #64	; 0x40
 8001562:	2101      	movs	r1, #1
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fbcb 	bl	8000d00 <USBD_LL_PrepareReceive>
                           MIDI_OUT_PACKET);  
      
  }
  
  return USBD_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	220a      	movs	r2, #10
 8001580:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 8001582:	4b03      	ldr	r3, [pc, #12]	; (8001590 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200000e0 	.word	0x200000e0

08001594 <USBD_MIDI_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_MIDI_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_MIDI_ItfTypeDef *fops)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <USBD_MIDI_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }
  return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <USBD_MIDI_SendEvent>:

uint8_t  USBD_MIDI_SendEvent(USBD_HandleTypeDef   *pdev, USBD_MIDI_MessageTypeDef event){
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  USBD_MIDI_HandleTypeDef   *haudio;
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80015ca:	60bb      	str	r3, [r7, #8]
  if(haudio){
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d02f      	beq.n	8001632 <USBD_MIDI_SendEvent+0x78>
    uint16_t new_wr_ptr = haudio->wr_ptr + 1;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80015d8:	3301      	adds	r3, #1
 80015da:	81fb      	strh	r3, [r7, #14]
    if(new_wr_ptr >= MIDI_TOTAL_BUF_SIZE) new_wr_ptr = 0;
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	d901      	bls.n	80015e6 <USBD_MIDI_SendEvent+0x2c>
 80015e2:	2300      	movs	r3, #0
 80015e4:	81fb      	strh	r3, [r7, #14]
    if(new_wr_ptr != haudio->rd_ptr){
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	89fa      	ldrh	r2, [r7, #14]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d01e      	beq.n	8001632 <USBD_MIDI_SendEvent+0x78>
      MIDI_SET_USB_CIN(event, MIDI_GET_EVENT_ID(event) >> 4);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f023 020f 	bic.w	r2, r3, #15
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	4313      	orrs	r3, r2
 8001606:	603b      	str	r3, [r7, #0]
      haudio->tx_buffer_wr[haudio->wr_ptr] = event;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	3320      	adds	r3, #32
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	605a      	str	r2, [r3, #4]
      haudio->wr_ptr = new_wr_ptr;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	89fa      	ldrh	r2, [r7, #14]
 800161e:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001622:	f3bf 8f4f 	dsb	sy
}
 8001626:	bf00      	nop
      
      __DSB();
      USBD_MIDI_SetupTransfer(pdev);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fee5 	bl	80013f8 <USBD_MIDI_SetupTransfer>
      
      return USBD_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <USBD_MIDI_SendEvent+0x7a>
    }
  }
  return USBD_BUSY;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <MIDI_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Init_FS(uint32_t options)
{ 
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8001644:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <MIDI_DeInit_FS>:
  *         DeInitializes the MIDI media low layer
  * @param  options: Reserved for future use
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_DeInit_FS(uint32_t options)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */ 
  return (USBD_OK);
 800165a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <MIDI_EventOUT_FS>:

static int8_t MIDI_EventOUT_FS(USBD_MIDI_MessageTypeDef event){
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint8_t key;
  GPIO_PinState pinstate;
  switch(MIDI_GET_EVENT_ID(event)){
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001678:	2b80      	cmp	r3, #128	; 0x80
 800167a:	d001      	beq.n	8001680 <MIDI_EventOUT_FS+0x18>
 800167c:	2b90      	cmp	r3, #144	; 0x90
 800167e:	d10d      	bne.n	800169c <MIDI_EventOUT_FS+0x34>
  case MIDI_EVENT_NOTE_OFF:
  case MIDI_EVENT_NOTE_ON:
  
    key = MIDI_GET_KEY(event);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	73fb      	strb	r3, [r7, #15]
    pinstate = (GPIO_PinState)(MIDI_GET_EVENT_ID(event) == MIDI_EVENT_NOTE_ON);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800168e:	2b90      	cmp	r3, #144	; 0x90
 8001690:	bf0c      	ite	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	2300      	movne	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	73bb      	strb	r3, [r7, #14]
    }
    else if(key == 67){
      HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin, pinstate);
    }*/
  
    break;
 800169a:	e000      	b.n	800169e <MIDI_EventOUT_FS+0x36>
  default:
    break;
 800169c:	bf00      	nop
  }
  
  return (USBD_OK);
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <MIDI_StatusTX_FS>:


static int8_t  MIDI_StatusTX_FS     (USBD_MIDI_TX_ConnectionTypeDef new_status){
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  /*if(new_status == MIDI_TX_CONNECTED){
    while(1);
  }*/
  
  return (USBD_OK);
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c8:	f7ff f92a 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ce:	e003      	b.n	80016d8 <LoopCopyDataInit>

080016d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016d6:	3104      	adds	r1, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e0:	d3f6      	bcc.n	80016d0 <CopyDataInit>
	ldr	r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <LoopForever+0x12>)
	b	LoopFillZerobss
 80016e4:	e002      	b.n	80016ec <LoopFillZerobss>

080016e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016e8:	f842 3b04 	str.w	r3, [r2], #4

080016ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <LoopForever+0x16>)
	cmp	r2, r3
 80016ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f0:	d3f9      	bcc.n	80016e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f004 fd8b 	bl	800620c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016f6:	f7fe fd69 	bl	80001cc <main>

080016fa <LoopForever>:

LoopForever:
    b LoopForever
 80016fa:	e7fe      	b.n	80016fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016fc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001700:	0800631c 	.word	0x0800631c
	ldr	r0, =_sdata
 8001704:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001708:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 800170c:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 8001710:	20000ae4 	.word	0x20000ae4

08001714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC1_2_IRQHandler>

08001716 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f943 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f80e 	bl	8001748 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	e001      	b.n	800173c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001738:	f7ff f81c 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173c:	79fb      	ldrb	r3, [r7, #7]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_InitTick+0x6c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_InitTick+0x70>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_InitTick+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f941 	bl	80019fa <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d809      	bhi.n	8001798 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800178c:	f000 f919 	bl	80019c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_InitTick+0x74>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e007      	b.n	80017a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e004      	b.n	80017a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e001      	b.n	80017a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000100 	.word	0x20000100
 80017b8:	20000008 	.word	0x20000008
 80017bc:	200000fc 	.word	0x200000fc

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000100 	.word	0x20000100
 80017e4:	20000ae0 	.word	0x20000ae0

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000ae0 	.word	0x20000ae0

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffde 	bl	80017e8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000100 	.word	0x20000100

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff47 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff5c 	bl	8001890 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff8e 	bl	8001900 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffb0 	bl	8001968 <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	e14e      	b.n	8001cc2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8140 	beq.w	8001cbc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d00b      	beq.n	8001a5c <HAL_GPIO_Init+0x48>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b12      	cmp	r3, #18
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0xea>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d123      	bne.n	8001b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	6939      	ldr	r1, [r7, #16]
 8001b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0203 	and.w	r2, r3, #3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 809a 	beq.w	8001cbc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b88:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <HAL_GPIO_Init+0x2cc>)
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8c:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x2cc>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6613      	str	r3, [r2, #96]	; 0x60
 8001b94:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x2cc>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bca:	d013      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_GPIO_Init+0x2d4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_GPIO_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_GPIO_Init+0x2d8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <HAL_GPIO_Init+0x1d8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a44      	ldr	r2, [pc, #272]	; (8001cf0 <HAL_GPIO_Init+0x2dc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_GPIO_Init+0x1d4>
 8001be4:	2303      	movs	r3, #3
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001be8:	2307      	movs	r3, #7
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c06:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <HAL_GPIO_Init+0x2d0>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c14:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c38:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c62:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f47f aea9 	bne.w	8001a24 <HAL_GPIO_Init+0x10>
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	48000c00 	.word	0x48000c00
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e001      	b.n	8001d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43d9      	mvns	r1, r3
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	400b      	ands	r3, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e081      	b.n	8001ea2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fd02 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2224      	movs	r2, #36	; 0x24
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ddc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e006      	b.n	8001e14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d104      	bne.n	8001e26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	ea42 0103 	orr.w	r1, r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	021a      	lsls	r2, r3, #8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69d9      	ldr	r1, [r3, #28]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1a      	ldr	r2, [r3, #32]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	460b      	mov	r3, r1
 8001eba:	817b      	strh	r3, [r7, #10]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	f040 80db 	bne.w	8002084 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_I2C_Master_Receive+0x30>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e0d4      	b.n	8002086 <HAL_I2C_Master_Receive+0x1da>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ee4:	f7ff fc80 	bl	80017e8 <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2319      	movs	r3, #25
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f9fb 	bl	80022f2 <I2C_WaitOnFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0bf      	b.n	8002086 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2222      	movs	r2, #34	; 0x22
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2210      	movs	r2, #16
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	893a      	ldrh	r2, [r7, #8]
 8001f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	d90e      	bls.n	8001f56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	8979      	ldrh	r1, [r7, #10]
 8001f46:	4b52      	ldr	r3, [pc, #328]	; (8002090 <HAL_I2C_Master_Receive+0x1e4>)
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fb5e 	bl	8002610 <I2C_TransferConfig>
 8001f54:	e06d      	b.n	8002032 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_I2C_Master_Receive+0x1e4>)
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fb4d 	bl	8002610 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f76:	e05c      	b.n	8002032 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6a39      	ldr	r1, [r7, #32]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fa75 	bl	800246c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e07c      	b.n	8002086 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d034      	beq.n	8002032 <HAL_I2C_Master_Receive+0x186>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d130      	bne.n	8002032 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f989 	bl	80022f2 <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e04d      	b.n	8002086 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	d90e      	bls.n	8002012 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	2300      	movs	r3, #0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fb00 	bl	8002610 <I2C_TransferConfig>
 8002010:	e00f      	b.n	8002032 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 faef 	bl	8002610 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d19d      	bne.n	8001f78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	6a39      	ldr	r1, [r7, #32]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f9d6 	bl	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e01a      	b.n	8002086 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2220      	movs	r2, #32
 8002056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_I2C_Master_Receive+0x1e8>)
 8002064:	400b      	ands	r3, r1
 8002066:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	e000      	b.n	8002086 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002084:	2302      	movs	r3, #2
  }
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	80002400 	.word	0x80002400
 8002094:	fe00e800 	.word	0xfe00e800

08002098 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	f040 80f5 	bne.w	80022a0 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_I2C_Slave_Transmit+0x2a>
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0e9      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_I2C_Slave_Transmit+0x44>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0e2      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020e4:	f7ff fb80 	bl	80017e8 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2221      	movs	r2, #33	; 0x21
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002120:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2200      	movs	r2, #0
 800212a:	2108      	movs	r1, #8
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f8e0 	bl	80022f2 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002146:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0aa      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2208      	movs	r2, #8
 8002152:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d118      	bne.n	800218e <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	2108      	movs	r1, #8
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f8c3 	bl	80022f2 <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002180:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e08d      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2208      	movs	r2, #8
 800218c:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f8a9 	bl	80022f2 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d02d      	beq.n	8002202 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f8d7 	bl	8002372 <I2C_WaitOnTXISFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d8:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e061      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1d6      	bne.n	80021ba <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f8ee 	bl	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d011      	beq.n	8002240 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222a:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	2b04      	cmp	r3, #4
 8002232:	d103      	bne.n	800223c <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
 800223a:	e001      	b.n	8002240 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e030      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2220      	movs	r2, #32
 8002246:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f84c 	bl	80022f2 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e016      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002282:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	e000      	b.n	80022a2 <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d103      	bne.n	80022c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d007      	beq.n	80022e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	619a      	str	r2, [r3, #24]
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002302:	e022      	b.n	800234a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800230a:	d01e      	beq.n	800234a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230c:	f7ff fa6c 	bl	80017e8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d302      	bcc.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x30>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4013      	ands	r3, r2
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	429a      	cmp	r2, r3
 8002366:	d0cd      	beq.n	8002304 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800237e:	e02c      	b.n	80023da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f8dd 	bl	8002544 <I2C_IsAcknowledgeFailed>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e02a      	b.n	80023ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239a:	d01e      	beq.n	80023da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239c:	f7ff fa24 	bl	80017e8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d302      	bcc.n	80023b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d113      	bne.n	80023da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e007      	b.n	80023ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d1cb      	bne.n	8002380 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fe:	e028      	b.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f89d 	bl	8002544 <I2C_IsAcknowledgeFailed>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e026      	b.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7ff f9e8 	bl	80017e8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e007      	b.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d1cf      	bne.n	8002400 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002478:	e055      	b.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f860 	bl	8002544 <I2C_IsAcknowledgeFailed>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e053      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b20      	cmp	r3, #32
 800249a:	d129      	bne.n	80024f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d105      	bne.n	80024b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e03f      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2220      	movs	r2, #32
 80024bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80024ca:	400b      	ands	r3, r1
 80024cc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e022      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f0:	f7ff f97a 	bl	80017e8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d302      	bcc.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0220 	orr.w	r2, r3, #32
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e007      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d1a2      	bne.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	fe00e800 	.word	0xfe00e800

08002544 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b10      	cmp	r3, #16
 800255c:	d151      	bne.n	8002602 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800255e:	e022      	b.n	80025a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002566:	d01e      	beq.n	80025a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002568:	f7ff f93e 	bl	80017e8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	d302      	bcc.n	800257e <I2C_IsAcknowledgeFailed+0x3a>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e02e      	b.n	8002604 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d1d5      	bne.n	8002560 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2210      	movs	r2, #16
 80025ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2220      	movs	r2, #32
 80025c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff fe70 	bl	80022aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <I2C_IsAcknowledgeFailed+0xc8>)
 80025d6:	400b      	ands	r3, r1
 80025d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	fe00e800 	.word	0xfe00e800

08002610 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	4613      	mov	r3, r2
 8002620:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	0d5b      	lsrs	r3, r3, #21
 800262c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <I2C_TransferConfig+0x58>)
 8002632:	430b      	orrs	r3, r1
 8002634:	43db      	mvns	r3, r3
 8002636:	ea02 0103 	and.w	r1, r2, r3
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002640:	7a7b      	ldrb	r3, [r7, #9]
 8002642:	041b      	lsls	r3, r3, #16
 8002644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	431a      	orrs	r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	03ff63ff 	.word	0x03ff63ff

0800266c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	d138      	bne.n	80026f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800268c:	2302      	movs	r3, #2
 800268e:	e032      	b.n	80026f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e000      	b.n	80026f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
  }
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b20      	cmp	r3, #32
 8002716:	d139      	bne.n	800278c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002722:	2302      	movs	r3, #2
 8002724:	e033      	b.n	800278e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2224      	movs	r2, #36	; 0x24
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002754:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800279a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279c:	b08b      	sub	sp, #44	; 0x2c
 800279e:	af06      	add	r7, sp, #24
 80027a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e104      	b.n	80029b6 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe f83f 	bl	8000844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fb9c 	bl	8003f10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	687e      	ldr	r6, [r7, #4]
 80027e0:	466d      	mov	r5, sp
 80027e2:	f106 0410 	add.w	r4, r6, #16
 80027e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	602b      	str	r3, [r5, #0]
 80027ee:	1d33      	adds	r3, r6, #4
 80027f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f2:	6838      	ldr	r0, [r7, #0]
 80027f4:	f001 fb64 	bl	8003ec0 <USB_CoreInit>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0d5      	b.n	80029b6 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f001 fb98 	bl	8003f46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e04c      	b.n	80028b6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	3301      	adds	r3, #1
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	b298      	uxth	r0, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	3336      	adds	r3, #54	; 0x36
 800285a:	4602      	mov	r2, r0
 800285c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	3303      	adds	r3, #3
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	3338      	adds	r3, #56	; 0x38
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	333c      	adds	r3, #60	; 0x3c
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3340      	adds	r3, #64	; 0x40
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	3301      	adds	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3ad      	bcc.n	800281c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e044      	b.n	8002950 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	3301      	adds	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3b5      	bcc.n	80028c6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	687e      	ldr	r6, [r7, #4]
 8002962:	466d      	mov	r5, sp
 8002964:	f106 0410 	add.w	r4, r6, #16
 8002968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	602b      	str	r3, [r5, #0]
 8002970:	1d33      	adds	r3, r6, #4
 8002972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f001 faf3 	bl	8003f60 <USB_DevInit>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e014      	b.n	80029b6 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fa42 	bl	8002e2e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fbc8 	bl	8006144 <USB_DevDisconnect>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_Start+0x16>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e012      	b.n	80029fa <HAL_PCD_Start+0x3c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fa7e 	bl	8003ee2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 fb93 	bl	8006116 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	4608      	mov	r0, r1
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	70fb      	strb	r3, [r7, #3]
 8002a14:	460b      	mov	r3, r1
 8002a16:	803b      	strh	r3, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da0e      	bge.n	8002a46 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	705a      	strb	r2, [r3, #1]
 8002a44:	e00e      	b.n	8002a64 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 0207 	and.w	r2, r3, #7
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a70:	883a      	ldrh	r2, [r7, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	78ba      	ldrb	r2, [r7, #2]
 8002a7a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a8e:	78bb      	ldrb	r3, [r7, #2]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d102      	bne.n	8002a9a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_PCD_EP_Open+0xa6>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e00e      	b.n	8002ac6 <HAL_PCD_EP_Open+0xc4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68f9      	ldr	r1, [r7, #12]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 fa8a 	bl	8003fd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	da0e      	bge.n	8002b00 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	705a      	strb	r2, [r3, #1]
 8002afe:	e00e      	b.n	8002b1e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 0207 	and.w	r2, r3, #7
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_PCD_EP_Close+0x6a>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e00e      	b.n	8002b56 <HAL_PCD_EP_Close+0x88>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fdb0 	bl	80046ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	f003 0207 	and.w	r2, r3, #7
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6979      	ldr	r1, [r7, #20]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 ff63 	bl	8004a86 <USB_EPStartXfer>
 8002bc0:	e005      	b.n	8002bce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 ff5c 	bl	8004a86 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 0207 	and.w	r2, r3, #7
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	460b      	mov	r3, r1
 8002c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2201      	movs	r2, #1
 8002c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c54:	7afb      	ldrb	r3, [r7, #11]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c60:	7afb      	ldrb	r3, [r7, #11]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6979      	ldr	r1, [r7, #20]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 ff08 	bl	8004a86 <USB_EPStartXfer>
 8002c76:	e005      	b.n	8002c84 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6979      	ldr	r1, [r7, #20]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 ff01 	bl	8004a86 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 0207 	and.w	r2, r3, #7
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d901      	bls.n	8002cac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e04c      	b.n	8002d46 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da0e      	bge.n	8002cd2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	705a      	strb	r2, [r3, #1]
 8002cd0:	e00c      	b.n	8002cec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_EP_SetStall+0x7e>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e01c      	b.n	8002d46 <HAL_PCD_EP_SetStall+0xb8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 f9aa 	bl	8006074 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f003 fa19 	bl	800616e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_EP_Flush+0x1a>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e01b      	b.n	8002da0 <HAL_PCD_EP_Flush+0x52>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8002d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da09      	bge.n	8002d8c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f001 f90c 	bl	8003fa2 <USB_FlushTxFifo>
 8002d8a:	e004      	b.n	8002d96 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 f912 	bl	8003fba <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	4613      	mov	r3, r2
 8002db8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e009      	b.n	8002df2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dde:	897a      	ldrh	r2, [r7, #10]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002df2:	893b      	ldrh	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	80da      	strh	r2, [r3, #6]
 8002e06:	e00b      	b.n	8002e20 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40007000 	.word	0x40007000

08002ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eae:	d130      	bne.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb0:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d038      	beq.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2232      	movs	r2, #50	; 0x32
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0c9b      	lsrs	r3, r3, #18
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee4:	e002      	b.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d102      	bne.n	8002f00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f2      	bne.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0c:	d110      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e00f      	b.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d007      	beq.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f28:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40007000 	.word	0x40007000
 8002f44:	20000008 	.word	0x20000008
 8002f48:	431bde83 	.word	0x431bde83

08002f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f000 bc56 	b.w	800380c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f60:	4ba1      	ldr	r3, [pc, #644]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6a:	4b9f      	ldr	r3, [pc, #636]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80e6 	beq.w	800314e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_RCC_OscConfig+0x4c>
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	f040 808d 	bne.w	80030aa <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	f040 8089 	bne.w	80030aa <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f98:	4b93      	ldr	r3, [pc, #588]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x66>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f000 bc2d 	b.w	800380c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb6:	4b8c      	ldr	r3, [pc, #560]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_RCC_OscConfig+0x80>
 8002fc2:	4b89      	ldr	r3, [pc, #548]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_OscConfig+0x8c>
 8002fcc:	4b86      	ldr	r3, [pc, #536]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d224      	bcs.n	8003026 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fd87 	bl	8003af4 <RCC_SetFlashLatencyFromMSIRange>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f000 bc0d 	b.w	800380c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7c      	ldr	r2, [pc, #496]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	4977      	ldr	r1, [pc, #476]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003010:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	4972      	ldr	r1, [pc, #456]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
 8003024:	e025      	b.n	8003072 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003026:	4b70      	ldr	r3, [pc, #448]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6f      	ldr	r2, [pc, #444]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b6d      	ldr	r3, [pc, #436]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	496a      	ldr	r1, [pc, #424]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003044:	4b68      	ldr	r3, [pc, #416]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	4965      	ldr	r1, [pc, #404]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fd46 	bl	8003af4 <RCC_SetFlashLatencyFromMSIRange>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e3cc      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003072:	f000 fcb3 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003076:	4602      	mov	r2, r0
 8003078:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	495a      	ldr	r1, [pc, #360]	; (80031ec <HAL_RCC_OscConfig+0x2a0>)
 8003084:	5ccb      	ldrb	r3, [r1, r3]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	4a58      	ldr	r2, [pc, #352]	; (80031f0 <HAL_RCC_OscConfig+0x2a4>)
 8003090:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003092:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <HAL_RCC_OscConfig+0x2a8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fb56 	bl	8001748 <HAL_InitTick>
 800309c:	4603      	mov	r3, r0
 800309e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d052      	beq.n	800314c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	e3b0      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d032      	beq.n	8003118 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b2:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a4c      	ldr	r2, [pc, #304]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030be:	f7fe fb93 	bl	80017e8 <HAL_GetTick>
 80030c2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c6:	f7fe fb8f 	bl	80017e8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e399      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d8:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e4:	4b40      	ldr	r3, [pc, #256]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a3f      	ldr	r2, [pc, #252]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80030ea:	f043 0308 	orr.w	r3, r3, #8
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	493a      	ldr	r1, [pc, #232]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
 8003116:	e01a      	b.n	800314e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003118:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a32      	ldr	r2, [pc, #200]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003124:	f7fe fb60 	bl	80017e8 <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312c:	f7fe fb5c 	bl	80017e8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e366      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x1e0>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d073      	beq.n	8003242 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x220>
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d10e      	bne.n	8003184 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d063      	beq.n	8003240 <HAL_RCC_OscConfig+0x2f4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d15f      	bne.n	8003240 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e343      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x250>
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0x28c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x274>
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x28c>
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <HAL_RCC_OscConfig+0x29c>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01b      	beq.n	8003218 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fb02 	bl	80017e8 <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	e010      	b.n	800320a <HAL_RCC_OscConfig+0x2be>
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080062d4 	.word	0x080062d4
 80031f0:	20000008 	.word	0x20000008
 80031f4:	200000fc 	.word	0x200000fc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe faf6 	bl	80017e8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e300      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCC_OscConfig+0x540>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2ac>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fae6 	bl	80017e8 <HAL_GetTick>
 800321c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe fae2 	bl	80017e8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e2ec      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	4b96      	ldr	r3, [pc, #600]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x2d4>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d060      	beq.n	8003310 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x314>
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d119      	bne.n	800328e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d116      	bne.n	800328e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	4b8a      	ldr	r3, [pc, #552]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x32c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e2c9      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b84      	ldr	r3, [pc, #528]	; (800348c <HAL_RCC_OscConfig+0x540>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	4981      	ldr	r1, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	e040      	b.n	8003310 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d023      	beq.n	80032de <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003296:	4b7d      	ldr	r3, [pc, #500]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7c      	ldr	r2, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x540>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe faa1 	bl	80017e8 <HAL_GetTick>
 80032a6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe fa9d 	bl	80017e8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e2a7      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b70      	ldr	r3, [pc, #448]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	496d      	ldr	r1, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e018      	b.n	8003310 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80032e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe fa7d 	bl	80017e8 <HAL_GetTick>
 80032ee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe fa79 	bl	80017e8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e283      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003304:	4b61      	ldr	r3, [pc, #388]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d07f      	beq.n	800341c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d05f      	beq.n	80033e4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003324:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	429a      	cmp	r2, r3
 8003338:	d037      	beq.n	80033aa <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d006      	beq.n	8003352 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e25c      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01b      	beq.n	8003394 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_RCC_OscConfig+0x540>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	4a4a      	ldr	r2, [pc, #296]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800336c:	f7fe fa3c 	bl	80017e8 <HAL_GetTick>
 8003370:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe fa38 	bl	80017e8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b11      	cmp	r3, #17
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e242      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003386:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ef      	bne.n	8003374 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003394:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	493a      	ldr	r1, [pc, #232]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033aa:	4b38      	ldr	r3, [pc, #224]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b0:	4a36      	ldr	r2, [pc, #216]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fa15 	bl	80017e8 <HAL_GetTick>
 80033be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe fa11 	bl	80017e8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b11      	cmp	r3, #17
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e21b      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ef      	beq.n	80033c2 <HAL_RCC_OscConfig+0x476>
 80033e2:	e01b      	b.n	800341c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_RCC_OscConfig+0x540>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe f9f8 	bl	80017e8 <HAL_GetTick>
 80033f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe f9f4 	bl	80017e8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b11      	cmp	r3, #17
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e1fe      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ef      	bne.n	80033fc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c1 	beq.w	80035ac <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003430:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10e      	bne.n	800345a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCC_OscConfig+0x540>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	4a12      	ldr	r2, [pc, #72]	; (800348c <HAL_RCC_OscConfig+0x540>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	; 0x58
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCC_OscConfig+0x540>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_RCC_OscConfig+0x544>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_RCC_OscConfig+0x544>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <HAL_RCC_OscConfig+0x544>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe f9b9 	bl	80017e8 <HAL_GetTick>
 8003476:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003478:	e00c      	b.n	8003494 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe f9b5 	bl	80017e8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d905      	bls.n	8003494 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1bf      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
 800348c:	40021000 	.word	0x40021000
 8003490:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	4bb1      	ldr	r3, [pc, #708]	; (800375c <HAL_RCC_OscConfig+0x810>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ec      	beq.n	800347a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d02c      	beq.n	8003506 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80034ac:	4bac      	ldr	r3, [pc, #688]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	49a8      	ldr	r1, [pc, #672]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034d2:	4ba3      	ldr	r3, [pc, #652]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	4aa1      	ldr	r2, [pc, #644]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034e2:	4b9f      	ldr	r3, [pc, #636]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a9d      	ldr	r2, [pc, #628]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f2:	e018      	b.n	8003526 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034f4:	4b9a      	ldr	r3, [pc, #616]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	4a99      	ldr	r2, [pc, #612]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003504:	e00f      	b.n	8003526 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003506:	4b96      	ldr	r3, [pc, #600]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	4a94      	ldr	r2, [pc, #592]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003516:	4b92      	ldr	r3, [pc, #584]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	4a90      	ldr	r2, [pc, #576]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800351e:	f023 0304 	bic.w	r3, r3, #4
 8003522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe f95b 	bl	80017e8 <HAL_GetTick>
 8003532:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe f957 	bl	80017e8 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e15f      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354c:	4b84      	ldr	r3, [pc, #528]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ed      	beq.n	8003536 <HAL_RCC_OscConfig+0x5ea>
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe f944 	bl	80017e8 <HAL_GetTick>
 8003560:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe f940 	bl	80017e8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e148      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357a:	4b79      	ldr	r3, [pc, #484]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ed      	bne.n	8003564 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003588:	4b75      	ldr	r3, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	4a74      	ldr	r2, [pc, #464]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a0:	4b6f      	ldr	r3, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	4a6e      	ldr	r2, [pc, #440]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80035a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03c      	beq.n	8003632 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01c      	beq.n	80035fa <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035c0:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80035c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c6:	4a66      	ldr	r2, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fe f90a 	bl	80017e8 <HAL_GetTick>
 80035d4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d8:	f7fe f906 	bl	80017e8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e110      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ea:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80035ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ef      	beq.n	80035d8 <HAL_RCC_OscConfig+0x68c>
 80035f8:	e01b      	b.n	8003632 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035fa:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80035fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003600:	4a57      	ldr	r2, [pc, #348]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fe f8ed 	bl	80017e8 <HAL_GetTick>
 800360e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003612:	f7fe f8e9 	bl	80017e8 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0f3      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003624:	4b4e      	ldr	r3, [pc, #312]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1ef      	bne.n	8003612 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80e7 	beq.w	800380a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	2b02      	cmp	r3, #2
 8003642:	f040 80b7 	bne.w	80037b4 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003646:	4b46      	ldr	r3, [pc, #280]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0203 	and.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	429a      	cmp	r2, r3
 8003658:	d124      	bne.n	80036a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	3b01      	subs	r3, #1
 8003666:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d11b      	bne.n	80036a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d113      	bne.n	80036a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	3b01      	subs	r3, #1
 800369e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d061      	beq.n	8003768 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d056      	beq.n	8003758 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036aa:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80036b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b6:	f7fe f897 	bl	80017e8 <HAL_GetTick>
 80036ba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036be:	f7fe f893 	bl	80017e8 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e09d      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_RCC_OscConfig+0x818>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	4311      	orrs	r1, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f6:	0212      	lsls	r2, r2, #8
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036fe:	0852      	lsrs	r2, r2, #1
 8003700:	3a01      	subs	r2, #1
 8003702:	0552      	lsls	r2, r2, #21
 8003704:	4311      	orrs	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800370a:	0852      	lsrs	r2, r2, #1
 800370c:	3a01      	subs	r2, #1
 800370e:	0652      	lsls	r2, r2, #25
 8003710:	430a      	orrs	r2, r1
 8003712:	4913      	ldr	r1, [pc, #76]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003730:	f7fe f85a 	bl	80017e8 <HAL_GetTick>
 8003734:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe f856 	bl	80017e8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e060      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_OscConfig+0x814>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003756:	e058      	b.n	800380a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e057      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
 800375c:	40007000 	.word	0x40007000
 8003760:	40021000 	.word	0x40021000
 8003764:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d14a      	bne.n	800380a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a23      	ldr	r2, [pc, #140]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800378c:	f7fe f82c 	bl	80017e8 <HAL_GetTick>
 8003790:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe f828 	bl	80017e8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e032      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x848>
 80037b2:	e02a      	b.n	800380a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d025      	beq.n	8003806 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fe f803 	bl	80017e8 <HAL_GetTick>
 80037e2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd ffff 	bl	80017e8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e009      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCC_OscConfig+0x8c8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x89a>
 8003804:	e001      	b.n	800380a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3728      	adds	r7, #40	; 0x28
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0c8      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d910      	bls.n	800385c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4961      	ldr	r1, [pc, #388]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b0      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d04c      	beq.n	8003902 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d107      	bne.n	8003880 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003870:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e09e      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d107      	bne.n	8003898 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d115      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e092      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a0:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e086      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e07e      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	493f      	ldr	r1, [pc, #252]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d2:	f7fd ff89 	bl	80017e8 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038da:	f7fd ff85 	bl	80017e8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e066      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 020c 	and.w	r2, r3, #12
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	429a      	cmp	r2, r3
 8003900:	d1eb      	bne.n	80038da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	492c      	ldr	r1, [pc, #176]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d210      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4924      	ldr	r1, [pc, #144]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e036      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4918      	ldr	r1, [pc, #96]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4910      	ldr	r1, [pc, #64]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800398e:	f000 f825 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490c      	ldr	r1, [pc, #48]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fec8 	bl	8001748 <HAL_InitTick>
 80039b8:	4603      	mov	r3, r0
 80039ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80039bc:	7afb      	ldrb	r3, [r7, #11]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	080062d4 	.word	0x080062d4
 80039d4:	20000008 	.word	0x20000008
 80039d8:	200000fc 	.word	0x200000fc

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f4:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x34>
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d121      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d11e      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a10:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a1c:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a38:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e004      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d134      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xac>
 8003a80:	e005      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a84:	617b      	str	r3, [r7, #20]
      break;
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a8a:	617b      	str	r3, [r7, #20]
      break;
 8003a8c:	e002      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	617b      	str	r3, [r7, #20]
      break;
 8003a92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	fb02 f203 	mul.w	r2, r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	0e5b      	lsrs	r3, r3, #25
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	080062e4 	.word	0x080062e4
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b0c:	f7ff f9ba 	bl	8002e84 <HAL_PWREx_GetVoltageRange>
 8003b10:	6178      	str	r0, [r7, #20]
 8003b12:	e014      	b.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b2c:	f7ff f9aa 	bl	8002e84 <HAL_PWREx_GetVoltageRange>
 8003b30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b44:	d10b      	bne.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d919      	bls.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b50:	d902      	bls.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b52:	2302      	movs	r3, #2
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	e013      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b58:	2301      	movs	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	e010      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d902      	bls.n	8003b6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b64:	2303      	movs	r3, #3
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e00a      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d102      	bne.n	8003b76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b70:	2302      	movs	r3, #2
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e004      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b70      	cmp	r3, #112	; 0x70
 8003b7a:	d101      	bne.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 0207 	bic.w	r2, r3, #7
 8003b88:	4909      	ldr	r1, [pc, #36]	; (8003bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d001      	beq.n	8003ba2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40022000 	.word	0x40022000

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 809e 	beq.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bd6:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	4a3f      	ldr	r2, [pc, #252]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c08:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a39      	ldr	r2, [pc, #228]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c14:	f7fd fde8 	bl	80017e8 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c1a:	e009      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1c:	f7fd fde4 	bl	80017e8 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d902      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c2e:	e005      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c30:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ef      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d15a      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c42:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01e      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d019      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c5e:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c8a:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fda4 	bl	80017e8 <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fd fda0 	bl	80017e8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d902      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	74fb      	strb	r3, [r7, #19]
            break;
 8003cba:	e006      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ec      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10b      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4904      	ldr	r1, [pc, #16]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ce6:	e009      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	74bb      	strb	r3, [r7, #18]
 8003cec:	e006      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cfc:	7c7b      	ldrb	r3, [r7, #17]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	4b6e      	ldr	r3, [pc, #440]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	4a6d      	ldr	r2, [pc, #436]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d1a:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f023 0203 	bic.w	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4964      	ldr	r1, [pc, #400]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d3c:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 020c 	bic.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	495c      	ldr	r1, [pc, #368]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d5e:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4953      	ldr	r1, [pc, #332]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d80:	4b4e      	ldr	r3, [pc, #312]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	494b      	ldr	r1, [pc, #300]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003da2:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4942      	ldr	r1, [pc, #264]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc4:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	493a      	ldr	r1, [pc, #232]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de6:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	4931      	ldr	r1, [pc, #196]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e08:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	4929      	ldr	r1, [pc, #164]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4920      	ldr	r1, [pc, #128]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d015      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	4918      	ldr	r1, [pc, #96]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e76:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	490a      	ldr	r1, [pc, #40]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	f107 0014 	add.w	r0, r7, #20
 8003ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	b004      	add	sp, #16
 8003ee0:	4770      	bx	lr

08003ee2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003ef6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f18:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003f1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f60:	b084      	sub	sp, #16
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	f107 0014 	add.w	r0, r7, #20
 8003f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	b004      	add	sp, #16
 8003fa0:	4770      	bx	lr

08003fa2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b09b      	sub	sp, #108	; 0x6c
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	78db      	ldrb	r3, [r3, #3]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d81f      	bhi.n	8004042 <USB_ActivateEndpoint+0x72>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <USB_ActivateEndpoint+0x38>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004019 	.word	0x08004019
 800400c:	08004035 	.word	0x08004035
 8004010:	0800404b 	.word	0x0800404b
 8004014:	08004027 	.word	0x08004027
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004018:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800401c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004020:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004024:	e012      	b.n	800404c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004026:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800402a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800402e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004032:	e00b      	b.n	800404c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004034:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800403c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004040:	e004      	b.n	800404c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004048:	e000      	b.n	800404c <USB_ActivateEndpoint+0x7c>
      break;
 800404a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800405a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800405e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	b21b      	sxth	r3, r3
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	b21a      	sxth	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b21b      	sxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b21b      	sxth	r3, r3
 8004092:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	441a      	add	r2, r3
 80040a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80040a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	7b1b      	ldrb	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f040 8149 	bne.w	8004354 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	785b      	ldrb	r3, [r3, #1]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8084 	beq.w	80041d4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4413      	add	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00da      	lsls	r2, r3, #3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	88db      	ldrh	r3, [r3, #6]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	81fb      	strh	r3, [r7, #14]
 800410e:	89fb      	ldrh	r3, [r7, #14]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01b      	beq.n	8004150 <USB_ActivateEndpoint+0x180>
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	81bb      	strh	r3, [r7, #12]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	89bb      	ldrh	r3, [r7, #12]
 800413c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800414c:	b29b      	uxth	r3, r3
 800414e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	78db      	ldrb	r3, [r3, #3]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d020      	beq.n	800419a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416e:	813b      	strh	r3, [r7, #8]
 8004170:	893b      	ldrh	r3, [r7, #8]
 8004172:	f083 0320 	eor.w	r3, r3, #32
 8004176:	813b      	strh	r3, [r7, #8]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	441a      	add	r2, r3
 8004182:	893b      	ldrh	r3, [r7, #8]
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]
 8004198:	e27f      	b.n	800469a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b0:	817b      	strh	r3, [r7, #10]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	897b      	ldrh	r3, [r7, #10]
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]
 80041d2:	e262      	b.n	800469a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041de:	b29b      	uxth	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	4413      	add	r3, r2
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	00da      	lsls	r2, r3, #3
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	4413      	add	r3, r2
 80041f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	88db      	ldrh	r3, [r3, #6]
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	b29b      	uxth	r3, r3
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004212:	b29b      	uxth	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	4413      	add	r3, r2
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	00da      	lsls	r2, r3, #3
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	4413      	add	r3, r2
 8004226:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d112      	bne.n	800425a <USB_ActivateEndpoint+0x28a>
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800423e:	b29a      	uxth	r2, r3
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	801a      	strh	r2, [r3, #0]
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004252:	b29a      	uxth	r2, r3
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	e02f      	b.n	80042ba <USB_ActivateEndpoint+0x2ea>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b3e      	cmp	r3, #62	; 0x3e
 8004260:	d813      	bhi.n	800428a <USB_ActivateEndpoint+0x2ba>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	663b      	str	r3, [r7, #96]	; 0x60
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <USB_ActivateEndpoint+0x2ac>
 8004276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004278:	3301      	adds	r3, #1
 800427a:	663b      	str	r3, [r7, #96]	; 0x60
 800427c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427e:	b29b      	uxth	r3, r3
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	b29a      	uxth	r2, r3
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	e017      	b.n	80042ba <USB_ActivateEndpoint+0x2ea>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	663b      	str	r3, [r7, #96]	; 0x60
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <USB_ActivateEndpoint+0x2d4>
 800429e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a0:	3b01      	subs	r3, #1
 80042a2:	663b      	str	r3, [r7, #96]	; 0x60
 80042a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	029b      	lsls	r3, r3, #10
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	83fb      	strh	r3, [r7, #30]
 80042c8:	8bfb      	ldrh	r3, [r7, #30]
 80042ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01b      	beq.n	800430a <USB_ActivateEndpoint+0x33a>
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	83bb      	strh	r3, [r7, #28]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	441a      	add	r2, r3
 80042f4:	8bbb      	ldrh	r3, [r7, #28]
 80042f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004306:	b29b      	uxth	r3, r3
 8004308:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004320:	837b      	strh	r3, [r7, #26]
 8004322:	8b7b      	ldrh	r3, [r7, #26]
 8004324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004328:	837b      	strh	r3, [r7, #26]
 800432a:	8b7b      	ldrh	r3, [r7, #26]
 800432c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004330:	837b      	strh	r3, [r7, #26]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	8b7b      	ldrh	r3, [r7, #26]
 800433e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]
 8004352:	e1a2      	b.n	800469a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800437c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004384:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438c:	b29b      	uxth	r3, r3
 800438e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65bb      	str	r3, [r7, #88]	; 0x58
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439a:	b29b      	uxth	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a0:	4413      	add	r3, r2
 80043a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	00da      	lsls	r2, r3, #3
 80043aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b2:	657b      	str	r3, [r7, #84]	; 0x54
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	891b      	ldrh	r3, [r3, #8]
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	653b      	str	r3, [r7, #80]	; 0x50
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d4:	4413      	add	r3, r2
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	00da      	lsls	r2, r3, #3
 80043de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e0:	4413      	add	r3, r2
 80043e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	895b      	ldrh	r3, [r3, #10]
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8091 	bne.w	8004524 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004410:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01b      	beq.n	8004452 <USB_ActivateEndpoint+0x482>
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004460:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01b      	beq.n	80044a2 <USB_ActivateEndpoint+0x4d2>
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004480:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800448e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80044ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80044bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80044c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80044c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004500:	867b      	strh	r3, [r7, #50]	; 0x32
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	441a      	add	r2, r3
 800450c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800450e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
 8004522:	e0ba      	b.n	800469a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004534:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01d      	beq.n	800457c <USB_ActivateEndpoint+0x5ac>
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800458c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01d      	beq.n	80045d4 <USB_ActivateEndpoint+0x604>
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	78db      	ldrb	r3, [r3, #3]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d024      	beq.n	8004626 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045fa:	f083 0320 	eor.w	r3, r3, #32
 80045fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
 8004624:	e01d      	b.n	8004662 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800464e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004696:	b29b      	uxth	r3, r3
 8004698:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800469a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800469e:	4618      	mov	r0, r3
 80046a0:	376c      	adds	r7, #108	; 0x6c
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop

080046ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b08d      	sub	sp, #52	; 0x34
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	7b1b      	ldrb	r3, [r3, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 808e 	bne.w	80047dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d044      	beq.n	8004752 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	81bb      	strh	r3, [r7, #12]
 80046d6:	89bb      	ldrh	r3, [r7, #12]
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01b      	beq.n	8004718 <USB_DeactivateEndpoint+0x6c>
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	817b      	strh	r3, [r7, #10]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004714:	b29b      	uxth	r3, r3
 8004716:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472e:	813b      	strh	r3, [r7, #8]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	441a      	add	r2, r3
 800473a:	893b      	ldrh	r3, [r7, #8]
 800473c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	b29b      	uxth	r3, r3
 800474e:	8013      	strh	r3, [r2, #0]
 8004750:	e192      	b.n	8004a78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	827b      	strh	r3, [r7, #18]
 8004760:	8a7b      	ldrh	r3, [r7, #18]
 8004762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01b      	beq.n	80047a2 <USB_DeactivateEndpoint+0xf6>
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004780:	823b      	strh	r3, [r7, #16]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	441a      	add	r2, r3
 800478c:	8a3b      	ldrh	r3, [r7, #16]
 800478e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b8:	81fb      	strh	r3, [r7, #14]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	441a      	add	r2, r3
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8013      	strh	r3, [r2, #0]
 80047da:	e14d      	b.n	8004a78 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 80a5 	bne.w	8004930 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	843b      	strh	r3, [r7, #32]
 80047f4:	8c3b      	ldrh	r3, [r7, #32]
 80047f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01b      	beq.n	8004836 <USB_DeactivateEndpoint+0x18a>
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	83fb      	strh	r3, [r7, #30]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8bfb      	ldrh	r3, [r7, #30]
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	83bb      	strh	r3, [r7, #28]
 8004844:	8bbb      	ldrh	r3, [r7, #28]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01b      	beq.n	8004886 <USB_DeactivateEndpoint+0x1da>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	837b      	strh	r3, [r7, #26]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	8b7b      	ldrh	r3, [r7, #26]
 8004872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004882:	b29b      	uxth	r3, r3
 8004884:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489c:	833b      	strh	r3, [r7, #24]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	8b3b      	ldrh	r3, [r7, #24]
 80048aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d4:	82fb      	strh	r3, [r7, #22]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	8afb      	ldrh	r3, [r7, #22]
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490c:	82bb      	strh	r3, [r7, #20]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	8abb      	ldrh	r3, [r7, #20]
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
 800492e:	e0a3      	b.n	8004a78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800493e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <USB_DeactivateEndpoint+0x2d4>
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800498e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <USB_DeactivateEndpoint+0x324>
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	441a      	add	r2, r3
 8004a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3734      	adds	r7, #52	; 0x34
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b0cc      	sub	sp, #304	; 0x130
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	6018      	str	r0, [r3, #0]
 8004a90:	463b      	mov	r3, r7
 8004a92:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a94:	463b      	mov	r3, r7
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	f040 872e 	bne.w	80058fc <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d905      	bls.n	8004abc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004aba:	e004      	b.n	8004ac6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004abc:	463b      	mov	r3, r7
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	7b1b      	ldrb	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d134      	bne.n	8004b3a <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6959      	ldr	r1, [r3, #20]
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	88da      	ldrh	r2, [r3, #6]
 8004adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	1d38      	adds	r0, r7, #4
 8004ae4:	6800      	ldr	r0, [r0, #0]
 8004ae6:	f001 fb4e 	bl	8006186 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004aea:	f107 0310 	add.w	r3, r7, #16
 8004aee:	1d3a      	adds	r2, r7, #4
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	f107 0310 	add.w	r3, r7, #16
 8004b04:	f107 0210 	add.w	r2, r7, #16
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	463b      	mov	r3, r7
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	00da      	lsls	r2, r3, #3
 8004b16:	f107 0310 	add.w	r3, r7, #16
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004b22:	f107 030c 	add.w	r3, r7, #12
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	f107 030c 	add.w	r3, r7, #12
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	f000 beac 	b.w	8005892 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	78db      	ldrb	r3, [r3, #3]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	f040 838c 	bne.w	800525e <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b46:	463b      	mov	r3, r7
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	f240 8330 	bls.w	80051b8 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	463b      	mov	r3, r7
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba6:	1ad2      	subs	r2, r2, r3
 8004ba8:	463b      	mov	r3, r7
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 819e 	beq.w	8004f06 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bce:	1d3a      	adds	r2, r7, #4
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d17a      	bne.n	8004cd4 <USB_EPStartXfer+0x24e>
 8004bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004be2:	1d3a      	adds	r2, r7, #4
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	440a      	add	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	463b      	mov	r3, r7
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	00da      	lsls	r2, r3, #3
 8004c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4413      	add	r3, r2
 8004c12:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8004c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11a      	bne.n	8004c5a <USB_EPStartXfer+0x1d4>
 8004c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	e062      	b.n	8004d20 <USB_EPStartXfer+0x29a>
 8004c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c60:	d819      	bhi.n	8004c96 <USB_EPStartXfer+0x210>
 8004c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <USB_EPStartXfer+0x1fc>
 8004c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	029b      	lsls	r3, r3, #10
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	e044      	b.n	8004d20 <USB_EPStartXfer+0x29a>
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <USB_EPStartXfer+0x230>
 8004cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	e025      	b.n	8004d20 <USB_EPStartXfer+0x29a>
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d120      	bne.n	8004d20 <USB_EPStartXfer+0x29a>
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	00da      	lsls	r2, r3, #3
 8004d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4413      	add	r3, r2
 8004d08:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8004d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d20:	463b      	mov	r3, r7
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	895b      	ldrh	r3, [r3, #10]
 8004d26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6959      	ldr	r1, [r3, #20]
 8004d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d3a:	1d38      	adds	r0, r7, #4
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	f001 fa22 	bl	8006186 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d42:	463b      	mov	r3, r7
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4c:	441a      	add	r2, r3
 8004d4e:	463b      	mov	r3, r7
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d909      	bls.n	8004d78 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004d64:	463b      	mov	r3, r7
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	621a      	str	r2, [r3, #32]
 8004d76:	e008      	b.n	8004d8a <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004d82:	463b      	mov	r3, r7
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2200      	movs	r2, #0
 8004d88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d17a      	bne.n	8004e8a <USB_EPStartXfer+0x404>
 8004d94:	f107 0318 	add.w	r3, r7, #24
 8004d98:	1d3a      	adds	r2, r7, #4
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4619      	mov	r1, r3
 8004daa:	f107 0318 	add.w	r3, r7, #24
 8004dae:	f107 0218 	add.w	r2, r7, #24
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	440a      	add	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	463b      	mov	r3, r7
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	00da      	lsls	r2, r3, #3
 8004dc0:	f107 0318 	add.w	r3, r7, #24
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d11a      	bne.n	8004e10 <USB_EPStartXfer+0x38a>
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	f107 0314 	add.w	r3, r7, #20
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	f107 0314 	add.w	r3, r7, #20
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	e067      	b.n	8004ee0 <USB_EPStartXfer+0x45a>
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	2b3e      	cmp	r3, #62	; 0x3e
 8004e16:	d819      	bhi.n	8004e4c <USB_EPStartXfer+0x3c6>
 8004e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <USB_EPStartXfer+0x3b2>
 8004e2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e32:	3301      	adds	r3, #1
 8004e34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	e049      	b.n	8004ee0 <USB_EPStartXfer+0x45a>
 8004e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d104      	bne.n	8004e6c <USB_EPStartXfer+0x3e6>
 8004e62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e66:	3b01      	subs	r3, #1
 8004e68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	029b      	lsls	r3, r3, #10
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e02a      	b.n	8004ee0 <USB_EPStartXfer+0x45a>
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d125      	bne.n	8004ee0 <USB_EPStartXfer+0x45a>
 8004e94:	f107 0320 	add.w	r3, r7, #32
 8004e98:	1d3a      	adds	r2, r7, #4
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f107 0320 	add.w	r3, r7, #32
 8004eae:	f107 0220 	add.w	r2, r7, #32
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	463b      	mov	r3, r7
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	00da      	lsls	r2, r3, #3
 8004ec0:	f107 0320 	add.w	r3, r7, #32
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004ecc:	f107 031c 	add.w	r3, r7, #28
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	f107 031c 	add.w	r3, r7, #28
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	891b      	ldrh	r3, [r3, #8]
 8004ee6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eea:	463b      	mov	r3, r7
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6959      	ldr	r1, [r3, #20]
 8004ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004efa:	1d38      	adds	r0, r7, #4
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f001 f942 	bl	8006186 <USB_WritePMA>
 8004f02:	f000 bcc6 	b.w	8005892 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f06:	463b      	mov	r3, r7
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d164      	bne.n	8004fda <USB_EPStartXfer+0x554>
 8004f10:	1d3b      	adds	r3, r7, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	4413      	add	r3, r2
 8004f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	00da      	lsls	r2, r3, #3
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	4413      	add	r3, r2
 8004f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f38:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d112      	bne.n	8004f68 <USB_EPStartXfer+0x4e2>
 8004f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	e057      	b.n	8005018 <USB_EPStartXfer+0x592>
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6e:	d817      	bhi.n	8004fa0 <USB_EPStartXfer+0x51a>
 8004f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <USB_EPStartXfer+0x50a>
 8004f86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	029b      	lsls	r3, r3, #10
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	e03b      	b.n	8005018 <USB_EPStartXfer+0x592>
 8004fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <USB_EPStartXfer+0x53a>
 8004fb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd6:	801a      	strh	r2, [r3, #0]
 8004fd8:	e01e      	b.n	8005018 <USB_EPStartXfer+0x592>
 8004fda:	463b      	mov	r3, r7
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d119      	bne.n	8005018 <USB_EPStartXfer+0x592>
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	653b      	str	r3, [r7, #80]	; 0x50
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff8:	4413      	add	r3, r2
 8004ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005006:	4413      	add	r3, r2
 8005008:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800500c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800500e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005012:	b29a      	uxth	r2, r3
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005018:	463b      	mov	r3, r7
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	891b      	ldrh	r3, [r3, #8]
 800501e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005022:	463b      	mov	r3, r7
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6959      	ldr	r1, [r3, #20]
 8005028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502c:	b29b      	uxth	r3, r3
 800502e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005032:	1d38      	adds	r0, r7, #4
 8005034:	6800      	ldr	r0, [r0, #0]
 8005036:	f001 f8a6 	bl	8006186 <USB_WritePMA>
            ep->xfer_buff += len;
 800503a:	463b      	mov	r3, r7
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005044:	441a      	add	r2, r3
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800504c:	463b      	mov	r3, r7
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	463b      	mov	r3, r7
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	429a      	cmp	r2, r3
 800505a:	d909      	bls.n	8005070 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800505c:	463b      	mov	r3, r7
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a1a      	ldr	r2, [r3, #32]
 8005062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	463b      	mov	r3, r7
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	621a      	str	r2, [r3, #32]
 800506e:	e008      	b.n	8005082 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	643b      	str	r3, [r7, #64]	; 0x40
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d164      	bne.n	800515c <USB_EPStartXfer+0x6d6>
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	63bb      	str	r3, [r7, #56]	; 0x38
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	4413      	add	r3, r2
 80050a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	00da      	lsls	r2, r3, #3
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	4413      	add	r3, r2
 80050b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050ba:	637b      	str	r3, [r7, #52]	; 0x34
 80050bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d112      	bne.n	80050ea <USB_EPStartXfer+0x664>
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	e054      	b.n	8005194 <USB_EPStartXfer+0x70e>
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ee:	2b3e      	cmp	r3, #62	; 0x3e
 80050f0:	d817      	bhi.n	8005122 <USB_EPStartXfer+0x69c>
 80050f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <USB_EPStartXfer+0x68c>
 8005108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800510c:	3301      	adds	r3, #1
 800510e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005112:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005116:	b29b      	uxth	r3, r3
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	b29a      	uxth	r2, r3
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	e038      	b.n	8005194 <USB_EPStartXfer+0x70e>
 8005122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800512c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <USB_EPStartXfer+0x6bc>
 8005138:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800513c:	3b01      	subs	r3, #1
 800513e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005142:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005146:	b29b      	uxth	r3, r3
 8005148:	029b      	lsls	r3, r3, #10
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005154:	b29a      	uxth	r2, r3
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e01b      	b.n	8005194 <USB_EPStartXfer+0x70e>
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d116      	bne.n	8005194 <USB_EPStartXfer+0x70e>
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005174:	4413      	add	r3, r2
 8005176:	643b      	str	r3, [r7, #64]	; 0x40
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	00da      	lsls	r2, r3, #3
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	4413      	add	r3, r2
 8005184:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	b29a      	uxth	r2, r3
 8005190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	895b      	ldrh	r3, [r3, #10]
 800519a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519e:	463b      	mov	r3, r7
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6959      	ldr	r1, [r3, #20]
 80051a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051ae:	1d38      	adds	r0, r7, #4
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	f000 ffe8 	bl	8006186 <USB_WritePMA>
 80051b6:	e36c      	b.n	8005892 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	463b      	mov	r3, r7
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	b29b      	uxth	r3, r3
 8005204:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005214:	b29b      	uxth	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521a:	4413      	add	r3, r2
 800521c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	00da      	lsls	r2, r3, #3
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	4413      	add	r3, r2
 800522a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800522e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005234:	b29a      	uxth	r2, r3
 8005236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005238:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	891b      	ldrh	r3, [r3, #8]
 8005240:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6959      	ldr	r1, [r3, #20]
 800524a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524e:	b29b      	uxth	r3, r3
 8005250:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005254:	1d38      	adds	r0, r7, #4
 8005256:	6800      	ldr	r0, [r0, #0]
 8005258:	f000 ff95 	bl	8006186 <USB_WritePMA>
 800525c:	e319      	b.n	8005892 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800525e:	1d3b      	adds	r3, r7, #4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005296:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800529a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ac:	1ad2      	subs	r2, r2, r3
 80052ae:	463b      	mov	r3, r7
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	463b      	mov	r3, r7
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8162 	beq.w	8005594 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d164      	bne.n	80053ac <USB_EPStartXfer+0x926>
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f6:	4413      	add	r3, r2
 80052f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80052fa:	463b      	mov	r3, r7
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	00da      	lsls	r2, r3, #3
 8005302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005304:	4413      	add	r3, r2
 8005306:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800530a:	677b      	str	r3, [r7, #116]	; 0x74
 800530c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d112      	bne.n	800533a <USB_EPStartXfer+0x8b4>
 8005314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800531e:	b29a      	uxth	r2, r3
 8005320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e057      	b.n	80053ea <USB_EPStartXfer+0x964>
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	2b3e      	cmp	r3, #62	; 0x3e
 8005340:	d817      	bhi.n	8005372 <USB_EPStartXfer+0x8ec>
 8005342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800534c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USB_EPStartXfer+0x8dc>
 8005358:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800535c:	3301      	adds	r3, #1
 800535e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005362:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005366:	b29b      	uxth	r3, r3
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	b29a      	uxth	r2, r3
 800536c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e03b      	b.n	80053ea <USB_EPStartXfer+0x964>
 8005372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800537c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <USB_EPStartXfer+0x90c>
 8005388:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800538c:	3b01      	subs	r3, #1
 800538e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005392:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005396:	b29b      	uxth	r3, r3
 8005398:	029b      	lsls	r3, r3, #10
 800539a:	b29b      	uxth	r3, r3
 800539c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	e01e      	b.n	80053ea <USB_EPStartXfer+0x964>
 80053ac:	463b      	mov	r3, r7
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d119      	bne.n	80053ea <USB_EPStartXfer+0x964>
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053c6:	4413      	add	r3, r2
 80053c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	00da      	lsls	r2, r3, #3
 80053d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053d8:	4413      	add	r3, r2
 80053da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80053ea:	463b      	mov	r3, r7
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	895b      	ldrh	r3, [r3, #10]
 80053f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6959      	ldr	r1, [r3, #20]
 80053fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005404:	1d38      	adds	r0, r7, #4
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	f000 febd 	bl	8006186 <USB_WritePMA>
          ep->xfer_buff += len;
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	441a      	add	r2, r3
 8005418:	463b      	mov	r3, r7
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800541e:	463b      	mov	r3, r7
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1a      	ldr	r2, [r3, #32]
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	429a      	cmp	r2, r3
 800542c:	d909      	bls.n	8005442 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005438:	1ad2      	subs	r2, r2, r3
 800543a:	463b      	mov	r3, r7
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	621a      	str	r2, [r3, #32]
 8005440:	e008      	b.n	8005454 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005442:	463b      	mov	r3, r7
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800544c:	463b      	mov	r3, r7
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2200      	movs	r2, #0
 8005452:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 821a 	beq.w	8005892 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d164      	bne.n	8005532 <USB_EPStartXfer+0xaac>
 8005468:	1d3b      	adds	r3, r7, #4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	66bb      	str	r3, [r7, #104]	; 0x68
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800547c:	4413      	add	r3, r2
 800547e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	00da      	lsls	r2, r3, #3
 8005488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800548a:	4413      	add	r3, r2
 800548c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005490:	667b      	str	r3, [r7, #100]	; 0x64
 8005492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d112      	bne.n	80054c0 <USB_EPStartXfer+0xa3a>
 800549a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	e057      	b.n	8005570 <USB_EPStartXfer+0xaea>
 80054c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c4:	2b3e      	cmp	r3, #62	; 0x3e
 80054c6:	d817      	bhi.n	80054f8 <USB_EPStartXfer+0xa72>
 80054c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <USB_EPStartXfer+0xa62>
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e2:	3301      	adds	r3, #1
 80054e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	029b      	lsls	r3, r3, #10
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e03b      	b.n	8005570 <USB_EPStartXfer+0xaea>
 80054f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <USB_EPStartXfer+0xa92>
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005512:	3b01      	subs	r3, #1
 8005514:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551c:	b29b      	uxth	r3, r3
 800551e:	029b      	lsls	r3, r3, #10
 8005520:	b29b      	uxth	r3, r3
 8005522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552a:	b29a      	uxth	r2, r3
 800552c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e01e      	b.n	8005570 <USB_EPStartXfer+0xaea>
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d119      	bne.n	8005570 <USB_EPStartXfer+0xaea>
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	673b      	str	r3, [r7, #112]	; 0x70
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005550:	4413      	add	r3, r2
 8005552:	673b      	str	r3, [r7, #112]	; 0x70
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	00da      	lsls	r2, r3, #3
 800555c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800555e:	4413      	add	r3, r2
 8005560:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556a:	b29a      	uxth	r2, r3
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005570:	463b      	mov	r3, r7
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	891b      	ldrh	r3, [r3, #8]
 8005576:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6959      	ldr	r1, [r3, #20]
 8005580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005584:	b29b      	uxth	r3, r3
 8005586:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800558a:	1d38      	adds	r0, r7, #4
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f000 fdfa 	bl	8006186 <USB_WritePMA>
 8005592:	e17e      	b.n	8005892 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d16f      	bne.n	800567e <USB_EPStartXfer+0xbf8>
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055b6:	4413      	add	r3, r2
 80055b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055bc:	463b      	mov	r3, r7
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	00da      	lsls	r2, r3, #3
 80055c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d116      	bne.n	8005608 <USB_EPStartXfer+0xb82>
 80055da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e05f      	b.n	80056c8 <USB_EPStartXfer+0xc42>
 8005608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560c:	2b3e      	cmp	r3, #62	; 0x3e
 800560e:	d818      	bhi.n	8005642 <USB_EPStartXfer+0xbbc>
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800561a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <USB_EPStartXfer+0xbaa>
 8005626:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800562a:	3301      	adds	r3, #1
 800562c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005630:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005634:	b29b      	uxth	r3, r3
 8005636:	029b      	lsls	r3, r3, #10
 8005638:	b29a      	uxth	r2, r3
 800563a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e042      	b.n	80056c8 <USB_EPStartXfer+0xc42>
 8005642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800564c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <USB_EPStartXfer+0xbdc>
 8005658:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800565c:	3b01      	subs	r3, #1
 800565e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005662:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005666:	b29b      	uxth	r3, r3
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	b29b      	uxth	r3, r3
 800566c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005674:	b29a      	uxth	r2, r3
 8005676:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	e024      	b.n	80056c8 <USB_EPStartXfer+0xc42>
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d11f      	bne.n	80056c8 <USB_EPStartXfer+0xc42>
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056a0:	4413      	add	r3, r2
 80056a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	00da      	lsls	r2, r3, #3
 80056ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	891b      	ldrh	r3, [r3, #8]
 80056ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6959      	ldr	r1, [r3, #20]
 80056d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056e2:	1d38      	adds	r0, r7, #4
 80056e4:	6800      	ldr	r0, [r0, #0]
 80056e6:	f000 fd4e 	bl	8006186 <USB_WritePMA>
          ep->xfer_buff += len;
 80056ea:	463b      	mov	r3, r7
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f4:	441a      	add	r2, r3
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6a1a      	ldr	r2, [r3, #32]
 8005702:	463b      	mov	r3, r7
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	d909      	bls.n	8005720 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800570c:	463b      	mov	r3, r7
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6a1a      	ldr	r2, [r3, #32]
 8005712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	621a      	str	r2, [r3, #32]
 800571e:	e008      	b.n	8005732 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80ab 	beq.w	8005892 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d16f      	bne.n	800582e <USB_EPStartXfer+0xda8>
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005766:	4413      	add	r3, r2
 8005768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800576c:	463b      	mov	r3, r7
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	00da      	lsls	r2, r3, #3
 8005774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005778:	4413      	add	r3, r2
 800577a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800577e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d116      	bne.n	80057b8 <USB_EPStartXfer+0xd32>
 800578a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005796:	b29a      	uxth	r2, r3
 8005798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e05b      	b.n	8005870 <USB_EPStartXfer+0xdea>
 80057b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057bc:	2b3e      	cmp	r3, #62	; 0x3e
 80057be:	d818      	bhi.n	80057f2 <USB_EPStartXfer+0xd6c>
 80057c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <USB_EPStartXfer+0xd5a>
 80057d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057da:	3301      	adds	r3, #1
 80057dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	029b      	lsls	r3, r3, #10
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	e03e      	b.n	8005870 <USB_EPStartXfer+0xdea>
 80057f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <USB_EPStartXfer+0xd8c>
 8005808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580c:	3b01      	subs	r3, #1
 800580e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005816:	b29b      	uxth	r3, r3
 8005818:	029b      	lsls	r3, r3, #10
 800581a:	b29b      	uxth	r3, r3
 800581c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005824:	b29a      	uxth	r2, r3
 8005826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e020      	b.n	8005870 <USB_EPStartXfer+0xdea>
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d11b      	bne.n	8005870 <USB_EPStartXfer+0xdea>
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005848:	4413      	add	r3, r2
 800584a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	00da      	lsls	r2, r3, #3
 8005856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800585a:	4413      	add	r3, r2
 800585c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005868:	b29a      	uxth	r2, r3
 800586a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800586e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	895b      	ldrh	r3, [r3, #10]
 8005876:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6959      	ldr	r1, [r3, #20]
 8005880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005884:	b29b      	uxth	r3, r3
 8005886:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800588a:	1d38      	adds	r0, r7, #4
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f000 fc7a 	bl	8006186 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f107 020a 	add.w	r2, r7, #10
 80058a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b0:	8013      	strh	r3, [r2, #0]
 80058b2:	f107 030a 	add.w	r3, r7, #10
 80058b6:	f107 020a 	add.w	r2, r7, #10
 80058ba:	8812      	ldrh	r2, [r2, #0]
 80058bc:	f082 0210 	eor.w	r2, r2, #16
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	f107 030a 	add.w	r3, r7, #10
 80058c6:	f107 020a 	add.w	r2, r7, #10
 80058ca:	8812      	ldrh	r2, [r2, #0]
 80058cc:	f082 0220 	eor.w	r2, r2, #32
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	441a      	add	r2, r3
 80058e0:	f107 030a 	add.w	r3, r7, #10
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	8013      	strh	r3, [r2, #0]
 80058fa:	e3b5      	b.n	8006068 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058fc:	463b      	mov	r3, r7
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	7b1b      	ldrb	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 8090 	bne.w	8005a28 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d90e      	bls.n	8005936 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005918:	463b      	mov	r3, r7
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005922:	463b      	mov	r3, r7
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	463b      	mov	r3, r7
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	619a      	str	r2, [r3, #24]
 8005934:	e008      	b.n	8005948 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005948:	1d3b      	adds	r3, r7, #4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005960:	4413      	add	r3, r2
 8005962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	00da      	lsls	r2, r3, #3
 800596e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005972:	4413      	add	r3, r2
 8005974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800597c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d116      	bne.n	80059b2 <USB_EPStartXfer+0xf2c>
 8005984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005990:	b29a      	uxth	r2, r3
 8005992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	e32c      	b.n	800600c <USB_EPStartXfer+0x1586>
 80059b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b6:	2b3e      	cmp	r3, #62	; 0x3e
 80059b8:	d818      	bhi.n	80059ec <USB_EPStartXfer+0xf66>
 80059ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059be:	085b      	lsrs	r3, r3, #1
 80059c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <USB_EPStartXfer+0xf54>
 80059d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059d4:	3301      	adds	r3, #1
 80059d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059de:	b29b      	uxth	r3, r3
 80059e0:	029b      	lsls	r3, r3, #10
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059e8:	801a      	strh	r2, [r3, #0]
 80059ea:	e30f      	b.n	800600c <USB_EPStartXfer+0x1586>
 80059ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <USB_EPStartXfer+0xf86>
 8005a02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a06:	3b01      	subs	r3, #1
 8005a08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	029b      	lsls	r3, r3, #10
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	e2f1      	b.n	800600c <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005a28:	463b      	mov	r3, r7
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	78db      	ldrb	r3, [r3, #3]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	f040 818f 	bne.w	8005d52 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a34:	463b      	mov	r3, r7
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d175      	bne.n	8005b2a <USB_EPStartXfer+0x10a4>
 8005a3e:	1d3b      	adds	r3, r7, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a56:	4413      	add	r3, r2
 8005a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	00da      	lsls	r2, r3, #3
 8005a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d116      	bne.n	8005aaa <USB_EPStartXfer+0x1024>
 8005a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	e065      	b.n	8005b76 <USB_EPStartXfer+0x10f0>
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab2:	d81a      	bhi.n	8005aea <USB_EPStartXfer+0x1064>
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <USB_EPStartXfer+0x1052>
 8005ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	029b      	lsls	r3, r3, #10
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	e045      	b.n	8005b76 <USB_EPStartXfer+0x10f0>
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <USB_EPStartXfer+0x1088>
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	029b      	lsls	r3, r3, #10
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e025      	b.n	8005b76 <USB_EPStartXfer+0x10f0>
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d120      	bne.n	8005b76 <USB_EPStartXfer+0x10f0>
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	00da      	lsls	r2, r3, #3
 8005b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b68:	463b      	mov	r3, r7
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b7e:	463b      	mov	r3, r7
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d175      	bne.n	8005c74 <USB_EPStartXfer+0x11ee>
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b90:	1d3b      	adds	r3, r7, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	00da      	lsls	r2, r3, #3
 8005bae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d116      	bne.n	8005bf4 <USB_EPStartXfer+0x116e>
 8005bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e061      	b.n	8005cb8 <USB_EPStartXfer+0x1232>
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005bfc:	d81a      	bhi.n	8005c34 <USB_EPStartXfer+0x11ae>
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <USB_EPStartXfer+0x119c>
 8005c18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e041      	b.n	8005cb8 <USB_EPStartXfer+0x1232>
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <USB_EPStartXfer+0x11d2>
 8005c4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c52:	3b01      	subs	r3, #1
 8005c54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e021      	b.n	8005cb8 <USB_EPStartXfer+0x1232>
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d11c      	bne.n	8005cb8 <USB_EPStartXfer+0x1232>
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c8e:	4413      	add	r3, r2
 8005c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c94:	463b      	mov	r3, r7
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	00da      	lsls	r2, r3, #3
 8005c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cb6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 81a4 	beq.w	800600c <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	463b      	mov	r3, r7
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cd8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <USB_EPStartXfer+0x126a>
 8005ce4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cf0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 8187 	bne.w	800600c <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cfe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 8180 	bne.w	800600c <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005d0c:	1d3b      	adds	r3, r7, #4
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	441a      	add	r2, r3
 8005d38:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	8013      	strh	r3, [r2, #0]
 8005d50:	e15c      	b.n	800600c <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d52:	463b      	mov	r3, r7
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	78db      	ldrb	r3, [r3, #3]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	f040 8155 	bne.w	8006008 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d90e      	bls.n	8005d8c <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d82:	1ad2      	subs	r2, r2, r3
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	619a      	str	r2, [r3, #24]
 8005d8a:	e008      	b.n	8005d9e <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d9e:	463b      	mov	r3, r7
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d16f      	bne.n	8005e88 <USB_EPStartXfer+0x1402>
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005db0:	1d3b      	adds	r3, r7, #4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	00da      	lsls	r2, r3, #3
 8005dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <USB_EPStartXfer+0x138c>
 8005de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	e05f      	b.n	8005ed2 <USB_EPStartXfer+0x144c>
 8005e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e16:	2b3e      	cmp	r3, #62	; 0x3e
 8005e18:	d818      	bhi.n	8005e4c <USB_EPStartXfer+0x13c6>
 8005e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <USB_EPStartXfer+0x13b4>
 8005e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e34:	3301      	adds	r3, #1
 8005e36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	029b      	lsls	r3, r3, #10
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	e042      	b.n	8005ed2 <USB_EPStartXfer+0x144c>
 8005e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5a:	f003 031f 	and.w	r3, r3, #31
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <USB_EPStartXfer+0x13e6>
 8005e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e66:	3b01      	subs	r3, #1
 8005e68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e024      	b.n	8005ed2 <USB_EPStartXfer+0x144c>
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d11f      	bne.n	8005ed2 <USB_EPStartXfer+0x144c>
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eaa:	4413      	add	r3, r2
 8005eac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	00da      	lsls	r2, r3, #3
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ec2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eda:	463b      	mov	r3, r7
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d16f      	bne.n	8005fc4 <USB_EPStartXfer+0x153e>
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efc:	4413      	add	r3, r2
 8005efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	00da      	lsls	r2, r3, #3
 8005f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0e:	4413      	add	r3, r2
 8005f10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d116      	bne.n	8005f4e <USB_EPStartXfer+0x14c8>
 8005f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	e05e      	b.n	800600c <USB_EPStartXfer+0x1586>
 8005f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f52:	2b3e      	cmp	r3, #62	; 0x3e
 8005f54:	d818      	bhi.n	8005f88 <USB_EPStartXfer+0x1502>
 8005f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <USB_EPStartXfer+0x14f0>
 8005f6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	e041      	b.n	800600c <USB_EPStartXfer+0x1586>
 8005f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <USB_EPStartXfer+0x1522>
 8005f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	029b      	lsls	r3, r3, #10
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e023      	b.n	800600c <USB_EPStartXfer+0x1586>
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d11e      	bne.n	800600c <USB_EPStartXfer+0x1586>
 8005fce:	1d3b      	adds	r3, r7, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	4413      	add	r3, r2
 8005fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	00da      	lsls	r2, r3, #3
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e001      	b.n	800600c <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e02e      	b.n	800606a <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	463b      	mov	r3, r7
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800602a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800602e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006032:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006036:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800603a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800603e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006042:	1d3b      	adds	r3, r7, #4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	463b      	mov	r3, r7
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d020      	beq.n	80060c8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609c:	81bb      	strh	r3, [r7, #12]
 800609e:	89bb      	ldrh	r3, [r7, #12]
 80060a0:	f083 0310 	eor.w	r3, r3, #16
 80060a4:	81bb      	strh	r3, [r7, #12]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8013      	strh	r3, [r2, #0]
 80060c6:	e01f      	b.n	8006108 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060de:	81fb      	strh	r3, [r7, #14]
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060e6:	81fb      	strh	r3, [r7, #14]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	89fb      	ldrh	r3, [r7, #14]
 80060f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006104:	b29b      	uxth	r3, r3
 8006106:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006124:	b29b      	uxth	r3, r3
 8006126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612e:	b29a      	uxth	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006152:	b29b      	uxth	r3, r3
 8006154:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006158:	b29a      	uxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006186:	b480      	push	{r7}
 8006188:	b08d      	sub	sp, #52	; 0x34
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	4611      	mov	r1, r2
 8006192:	461a      	mov	r2, r3
 8006194:	460b      	mov	r3, r1
 8006196:	80fb      	strh	r3, [r7, #6]
 8006198:	4613      	mov	r3, r2
 800619a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800619c:	88bb      	ldrh	r3, [r7, #4]
 800619e:	3301      	adds	r3, #1
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061bc:	e01b      	b.n	80061f6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	3301      	adds	r3, #1
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	3302      	adds	r3, #2
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	3b01      	subs	r3, #1
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e0      	bne.n	80061be <USB_WritePMA+0x38>
  }
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3734      	adds	r7, #52	; 0x34
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <__libc_init_array>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	4d0d      	ldr	r5, [pc, #52]	; (8006244 <__libc_init_array+0x38>)
 8006210:	4c0d      	ldr	r4, [pc, #52]	; (8006248 <__libc_init_array+0x3c>)
 8006212:	1b64      	subs	r4, r4, r5
 8006214:	10a4      	asrs	r4, r4, #2
 8006216:	2600      	movs	r6, #0
 8006218:	42a6      	cmp	r6, r4
 800621a:	d109      	bne.n	8006230 <__libc_init_array+0x24>
 800621c:	4d0b      	ldr	r5, [pc, #44]	; (800624c <__libc_init_array+0x40>)
 800621e:	4c0c      	ldr	r4, [pc, #48]	; (8006250 <__libc_init_array+0x44>)
 8006220:	f000 f820 	bl	8006264 <_init>
 8006224:	1b64      	subs	r4, r4, r5
 8006226:	10a4      	asrs	r4, r4, #2
 8006228:	2600      	movs	r6, #0
 800622a:	42a6      	cmp	r6, r4
 800622c:	d105      	bne.n	800623a <__libc_init_array+0x2e>
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	f855 3b04 	ldr.w	r3, [r5], #4
 8006234:	4798      	blx	r3
 8006236:	3601      	adds	r6, #1
 8006238:	e7ee      	b.n	8006218 <__libc_init_array+0xc>
 800623a:	f855 3b04 	ldr.w	r3, [r5], #4
 800623e:	4798      	blx	r3
 8006240:	3601      	adds	r6, #1
 8006242:	e7f2      	b.n	800622a <__libc_init_array+0x1e>
 8006244:	08006314 	.word	0x08006314
 8006248:	08006314 	.word	0x08006314
 800624c:	08006314 	.word	0x08006314
 8006250:	08006318 	.word	0x08006318

08006254 <memset>:
 8006254:	4402      	add	r2, r0
 8006256:	4603      	mov	r3, r0
 8006258:	4293      	cmp	r3, r2
 800625a:	d100      	bne.n	800625e <memset+0xa>
 800625c:	4770      	bx	lr
 800625e:	f803 1b01 	strb.w	r1, [r3], #1
 8006262:	e7f9      	b.n	8006258 <memset+0x4>

08006264 <_init>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr

08006270 <_fini>:
 8006270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006272:	bf00      	nop
 8006274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006276:	bc08      	pop	{r3}
 8006278:	469e      	mov	lr, r3
 800627a:	4770      	bx	lr
